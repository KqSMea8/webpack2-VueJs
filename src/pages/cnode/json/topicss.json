{
    "success": true,
    "data": {
        "id": "58eee565a92d341e48cfe7fc",
        "author_id": "54009f5ccd66f2eb37190485",
        "tab": "share",
        "content": "<div class=\"markdown-text\"><h1>2017，我们来聊聊 Node.js</h1>\n<h2>版本帝？</h2>\n<p>Chrome浏览器已经蹦到57版本了，是名副其实的版本帝，作为兄弟的Node.js也一样，1.0之前等了6年，而从1.0到8.0，只用了2年时间，这世界到底怎么了？</p>\n<p>我们就数一下</p>\n<ul>\n<li>从v0.1到0.12用了6年</li>\n<li>2015-01-14发布了v1.0.0版本（io.js）</li>\n<li>2.x（io.js）</li>\n<li>3.x（io.js）</li>\n<li>2015年09月Node.js基金会已发布Node.js V4.0版 与io.js合并后的第一个版本</li>\n<li>2015年10月Node.jsv4.2.0将是首个lts长期支持版本</li>\n<li>2016年底发布到4.2.4 &amp;&amp; 5.4.0</li>\n<li>2016年3月20日v4.4.0 LTS（长期支持版本）和v5.9.0 Stable（稳定版本）</li>\n<li>2016 年底 v6.0 支持95%以上的es6特性 ， v7.0通过flag支持async函数，99%的es6特性</li>\n<li>2017年2月发布v7.6版本，可以不通过flag使用async函数</li>\n</ul>\n<p><img src=\"//dn-cnode.qbox.me/Fv8fvViUeOJpBlOWYzBo1txRUhdN\" alt=\"lts-schedule.png\"></p>\n<p>整体来说趋于稳定</p>\n<ul>\n<li>成立了Node.js基金会，能够让Node.js在未来有更好的开源社区支持</li>\n<li>发布了LTS版本，意味着api稳定</li>\n<li>快速发版本，很多人吐槽这个，其实换个角度看，这也是社区活跃的一个体现，但如果大家真的看CHANGELOG，其实都是小改进，而且是边边角角的改进，也就是说Node.js的core（核心）已经非常稳定了，可以大规模使用</li>\n</ul>\n<h2>已无性能优势？</h2>\n<p>Node.js在2009年横空出世，可以说是纯异步获得高性能的功劳。所有语言几乎没有能够和它相比的，比如Java、PHP、Ruby都被啪啪的打脸。但是山一程，水一程，福祸相依，因为性能太出众，导致很多语言、编程模型上有更多探索，比如go语言产生、php里的swolo和vm改进等，大家似乎都以不支持异步为耻辱。后来的故事大家都知道了，性能都提到非常高，c10问题已经没人再考虑，只是大家实现早晚而产生的性能差距而已。</p>\n<blockquote>\n<p>编程语言的性能趋于一样的极限，所以剩下的选择，只有喜好</p>\n</blockquote>\n<p>那么在这种情况下，Node.js还有优势么？</p>\n<ul>\n<li>实现成本：Node.js除了异步流程控制稍复杂外，其他的都非常简单，比如写法，你可以面向过程、面向对象、函数式，根据自己的解决选择就好了。不要因为它现在变化快，就觉得自己跟不上潮流。尤其是后端程序员转Node.js几乎是2周以内的成本，某些语言光熟悉语法习惯也不止2周吧？</li>\n<li>调优成本：Node.js即使不优化，它的性能也非常好，如果优化，也比其他语言更简单</li>\n<li>学习成本：是否必须用，如果是必须要用，那就少学一样是一样，人生有限，不能都花在写hello world上。我想问，大前端离得开js么？</li>\n</ul>\n<blockquote>\n<p>误读：Node.js已无性能优势，它现在最强大的是基于npm的生态</p>\n</blockquote>\n<p>上面是成本上的比较，其实大家把关注点都转移到基于npm的生态上，截止2017年2月，在npm上有超过45万个模块，秒杀无数。npm是所有的开源的包管理里最强大的，我们说更了不起的Node.js，其实npm居功甚伟，后面会有独立的章节进行阐述。</p>\n<p>来自<a href=\"http://www.modulecounts.com/\">www.modulecounts.com</a>的各个包管理模块梳理的比较</p>\n<p><img src=\"//dn-cnode.qbox.me/FjmazMxffKETUdl9-NVoSqLB-DyT\" alt=\"Screen Shot 2017-04-04 at 21.02.41.png\">\nnpm生态是Node的优势不假，可是说“Node.js没有性能优势”真的对么？这其实就是误读，Node.js的性能依然很好呀，而且它有npm极其强大的生态，可谓性能与生态双剑合璧，你说你死不死？</p>\n<h2>异步和回调地狱？</h2>\n<blockquote>\n<p>天生异步，败也异步，成也异步</p>\n</blockquote>\n<p>正因为异步导致了api设计方式只能采用error-first风格的回调，于是大家硬生生的把callback写成了callback hell。于是各种黑粉就冒出来，无非是一些浅尝辄止之辈。但也正因为回调地狱是最差实践，所以大家才不得不求变，于是thunk、promise等纷沓而至。虽然Promise/A+不完美，但对于解决回调地狱是足够的了。而且随着ES6等规范实现，引入generator、co等，让异步越来越近于同步。当async函数落地的时候，Node已经站在了同C#、Python一样的高度上，大家还有什么理由黑呢？</p>\n<p>本小节先科普一下异步流程里的各种概念，后面会有独立章节进行详细讲解</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>Node.js API天生就是这样的</td>\n<td></td>\n</tr>\n<tr>\n<td>thunk</td>\n<td>参数的求值策略</td>\n<td></td>\n</tr>\n<tr>\n<td>promise</td>\n<td>最开始是Promise/A+规范，随后成为ES6标准</td>\n<td></td>\n</tr>\n<tr>\n<td>generator</td>\n<td>ES6种的生成器，用于计算，但tj想用做流程控制</td>\n<td></td>\n</tr>\n<tr>\n<td>co</td>\n<td>generator用起来非常麻烦，故而tj写了co这个generator生成器，用法更简单</td>\n<td></td>\n</tr>\n<tr>\n<td>async函数</td>\n<td>原本计划进入es7规范，结果差一点，但好在v8实现了，所以node 7就可以使用，无须等es7规范落地</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>有时，将一件事儿做到极致，也许能有另一种天地</p>\n</blockquote>\n<h2>应用场景</h2>\n<p>MEAN是一个Javascript平台的现代Web开发框架总称，它是MongoDB + Express +AngularJS + NodeJS 四个框架的第一个字母组合。它与传统LAMP一样是一种全套开发工具的简称。在2014和2015年喜欢讲这个，并且还有MEAN.js等框架，但今天已经过时，Node.js有了更多的应用场景。</p>\n<p>《Node.js in action》一书里说，Node所针对的应用程序有一个专门的简称：DIRT。它表示数据密集型实时（data-intensive real-time）程序。因为Node自身在I/O上非常轻量，它善于将数据从一个管道混排或代理到另一个管道上，这能在处理大量请求时持有很多开放的连接，并且只占用一小部分内存。它的设计目标是保证响应能力，跟浏览器一样。</p>\n<p>这话不假，但在今天来看，DIRT还是范围小了。其实DIRT本质上说的I/O处理的都算，但随着大前端的发展，Node.js已经不再只是I/O处理相关，而是更加的“Node”！</p>\n<p>这里给出Node.js的若干使用场景</p>\n<ul>\n<li>网站（如express/koa等）</li>\n<li>im即时聊天(<a href=\"http://socket.io\">socket.io</a>)</li>\n<li>api（移动端，pc，h5）</li>\n<li>HTTP Proxy（淘宝、Qunar、腾讯、百度都有）</li>\n<li>前端构建工具(grunt/gulp/bower/webpack/fis3…)</li>\n<li>写操作系统（NodeOS）</li>\n<li>跨平台打包工具（PC端的electron、nw.js，比如钉钉PC客户端、微信小程序IDE、微信客户端，移动的cordova，即老的Phonegap，还有更加有名的一站式开发框架ionicframework）</li>\n<li>命令行工具（比如cordova、shell.js）</li>\n<li>反向代理（比如anyproxy，node-http-proxy）</li>\n<li>编辑器Atom、VSCode等</li>\n</ul>\n<p>可以说目前大家能够看到的、用到的软件都有Node.js身影，当下最流行的软件写法也大都是基于Node.js的，比如PC客户端<a href=\"https://github.com/luin/medis\">luin/medis</a>采用electron打包，写法采用React+Redux。我自己一直的实践的【Node全栈】，也正是基于这种趋势而形成的。在未来，Node.js的应用场景会更加的广泛。更多参见<a href=\"https://github.com/sindresorhus/awesome-nodejs\">sindresorhus/awesome-nodejs</a>。</p>\n<h3>Web框架</h3>\n<p>演进时间线大致如下：</p>\n<ul>\n<li>2010年tj写的Express</li>\n<li>2011年Derby.js开始开发，8月5日，WalmartLabs的一位成员Eran Hammer提交了Hapi的第一次commit。Hapi原本是Postmile的一部分，并且最开始是基于Express构建的。后来它发展成自己自己的框架，</li>\n<li>2012年1月21日，专注于rest api的restify发布1.0版本，同构的meteor开始投入开发，最像rails的sails也开始了开发</li>\n<li>2013年tj开始玩generator，编写co这个generator执行器，并开始了Koa。2013 年下半年李成银开始ThinkJS，参考ThinkPHP</li>\n<li>2014年，4月9日，express发布4.0，进入4.x时代持续到今天，MEAN.js开始随着MEAN架构的提出开始开发，意图大一统，另外total.js开始，最像PHP’s Laravel 或 Python’s Django 或 <a href=\"http://ASP.NET\">ASP.NET</a> MVC的框架</li>\n<li>2015年8月22日， 下一代Web框架Koa发布1.0，可以在node 0.12下面，通过co + generator实现同步逻辑，那时候co还是基于thunkfy的，2015.10.30 ThinkJS发布了Es2015+ 特性开发的v 2.0版本</li>\n<li>2016 年 09 月，蚂蚁金服的eggjs，在 JSConf China 2016 上亮相并宣布开源</li>\n<li>2017年2月，下一代Web框架Koa发布2.0</li>\n</ul>\n<p>我们可以根据框架的特性进行分类</p>\n<table>\n<thead>\n<tr>\n<th>框架名称</th>\n<th>特性</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Express</td>\n<td>简单、实用，路由中间件等五脏俱全</td>\n<td>最著名的Web框架</td>\n</tr>\n<tr>\n<td>Derby.js &amp;&amp; Meteor</td>\n<td>同构</td>\n<td>前后端都放到一起，模糊了开发便捷，看上去更简单，实际上上对开发来说要求更高</td>\n</tr>\n<tr>\n<td>Sails、Total</td>\n<td>面向其他语言，Ruby、PHP等</td>\n<td>借鉴业界优秀实现，也是Node.js成熟的一个标志</td>\n</tr>\n<tr>\n<td>MEAN.js</td>\n<td>面向架构</td>\n<td>类似于脚手架，又期望同构，结果只是蹭了热点</td>\n</tr>\n<tr>\n<td>Hapi和Restfy</td>\n<td>面向Api &amp;&amp; 微服务</td>\n<td>移动互联网时代Api的作用被放大，故而独立分类。尤其是对于微服务开发更是利器</td>\n</tr>\n<tr>\n<td>ThinkJS</td>\n<td>面向新特性</td>\n<td>借鉴ThinkPHP，并慢慢走出自己的一条路，对于Async函数等新特性支持，无出其右</td>\n</tr>\n<tr>\n<td>Koa</td>\n<td>专注于异步流程改进</td>\n<td>下一代Web框架</td>\n</tr>\n</tbody>\n</table>\n<p>对于框架选型</p>\n<ul>\n<li>业务场景、特点，不必为了什么而什么，避免本末倒置</li>\n<li>自身团队能力、喜好，有时候技术选型决定团队氛围的，需要平衡激进与稳定</li>\n<li>出现问题的时候，有人能Cover的住，Node.js虽然8年历史，但模块完善程度良莠不齐，如果不慎踩到一个坑里，需要团队在无外力的情况能够搞定，否则会影响进度</li>\n</ul>\n<blockquote>\n<p>个人学习求新，企业架构求稳，无非喜好与场景而已</p>\n</blockquote>\n<p>我猜大家能够想到的场景，大约如下</p>\n<ul>\n<li>前端工具，比如gulp、grunt、webpack等</li>\n<li>服务器，做类似于Java、PHP的事儿</li>\n</ul>\n<p>如果只是做这些，和Java、PHP等就没啥区别了。如果再冠上更了不起的Node.js，就有点名不符实了。所以这里我稍加整理，看看和大家想的是否一样</p>\n<h3>技术栈演进</h3>\n<p>自从ES 2015（俗称ES 6）在Node.js 落地之后，整个Node.js开发都发生了翻天覆地的变化。自从0.10开始，Node.js就逐渐的加入了ES 6特性，比如0.12就可以使用generator，才导致寻求异步流程控制的tj写出了co这个著名的模块，继而诞生了Koa框架。但是在4.0之前，一直都是要通过flag才能开启generator支持，故而Koa 1.0迟迟未发布，在Node 4.0发布才发布的Koa 1.0。</p>\n<blockquote>\n<p>2015年，成熟的传统，而2016年，变革开始</p>\n</blockquote>\n<p>核心变更：es语法支持</p>\n<ul>\n<li>使用Node.js 4.x或5.x里的es6特性，如果想玩更高级的，可以使用<a href>babel</a>编译支持es7特性，或者typescript</li>\n<li>合理使用<a href=\"https://github.com/feross/standard\">standard</a>  或者 xo 代码风格约定</li>\n<li>适当的引入ES 6语法，只要Node.js SDK支持的，都可以使用</li>\n<li>需要大家重视OO（面向对象）写法的学习和使用，虽然ES 6的OO机制不健全，但这是大方向，以后会一直增强。OO对于大型软件开发更好。这其实也是我看好typescript的原因。</li>\n</ul>\n<p>对比一下变革前后的技术栈选型，希望读者能够从中感受到其中的变化</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>2015年</th>\n<th>2016年</th>\n<th>选型原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web框架</td>\n<td>express 4.x</td>\n<td>koa 1.0 &amp;&amp; 2.0 （koa2.0刚发布不久，喜欢折腾的可以考虑）</td>\n<td>主要在流程控制上的便利，异步毕竟要时刻注意，心累</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>mongoose（mongodb）</td>\n<td>mongoose（mongodb）</td>\n<td>对mongodb和mysql支持都一样，不过是mongodb更简单，足以应付绝大部分场景</td>\n</tr>\n<tr>\n<td>异步流程控制</td>\n<td>bluebird（Promise/A+实现）</td>\n<td>bluebird（Promise/A+实现）1） Koa 1.0 使用co + generator 2） Koa 2.0 使用async函数</td>\n<td>流程控制演进路线，从promise到async函数，无论如何，promise都是基石，必要掌握的</td>\n</tr>\n<tr>\n<td>模板引擎（视图层）</td>\n<td>ejs &amp;&amp; jade</td>\n<td>jade &amp;&amp; nunjucks</td>\n<td>给出了2种，一种可读性好，另一种简洁高效，都是非常好的</td>\n</tr>\n<tr>\n<td>测试</td>\n<td>mocha</td>\n<td>ava</td>\n<td>mocha是Node.js里著名的测试框架，但对新特性的支持没有ava那么好，而ava基于babel安装也要大上好多</td>\n</tr>\n<tr>\n<td>调试</td>\n<td>node-inspector</td>\n<td>VSCode</td>\n<td>在Node 6和7出来之后，node-inspector支持的不是那么好，相反VSCode可视化，简单，文件多时也不卡，特别好用</td>\n</tr>\n</tbody>\n</table>\n<h3>预处理器</h3>\n<p>前端预处理可分3种</p>\n<ul>\n<li>模板引擎</li>\n<li>css预处理器</li>\n<li>js友好语言</li>\n</ul>\n<p>这些都离不开Node.js的支持，对于前端工程师来说，使用Node.js来实现这些是最方便不过的。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>实现</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>模板引擎</td>\n<td>art\\mustache\\ejs\\hbs\\jade …</td>\n<td>上百种之多，自定义默认，编译成html，继而完成更多操作</td>\n</tr>\n<tr>\n<td>css预处理器</td>\n<td>less\\sass\\scss\\rework\\postcss</td>\n<td>自定义语法规则，编译成css</td>\n</tr>\n<tr>\n<td>js友好语言</td>\n<td>coffeescript、typescript</td>\n<td>自定义语法规则、编译成js</td>\n</tr>\n</tbody>\n</table>\n<h3>跨平台</h3>\n<p>跨平台指的是PC端、移动端、Web/H5</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>实现</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web/H5</td>\n<td>纯前端</td>\n<td>不必解释</td>\n</tr>\n<tr>\n<td>PC客户端</td>\n<td>nw.js和electron</td>\n<td>尤其是atom和vscode编辑器最为著名，像钉钉PC端，微信客户端、微信小程序IDE等都是这样的，通过web技术来打包成PC客户端</td>\n</tr>\n<tr>\n<td>移动端</td>\n<td>cordova（旧称PhoneGap），基于cordova的ionicframework</td>\n<td>这种采用h5开发，打包成ipa或apk的应用，称为Hybrid开发（混搭），通过webview实现所谓的跨平台，应用的还是非常广泛的</td>\n</tr>\n</tbody>\n</table>\n<h3>构建工具</h3>\n<p>说起构建工具，大概会想到make、ant、rake、gradle等，其实Node.js里有更多实现</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>介绍</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jake</td>\n<td>基于coffeescript的大概都熟悉这个，和make、rake类似</td>\n<td>经典传统</td>\n</tr>\n<tr>\n<td>grunt</td>\n<td>dsl风格的早期著名框架</td>\n<td>配置非常麻烦</td>\n</tr>\n<tr>\n<td>gulp</td>\n<td>流式构建，不会产生中间文件，利用Stream机制，处理大文件和内存有优势，配置简单，只有懂点js就能搞定</td>\n<td>grunt的替代品</td>\n</tr>\n<tr>\n<td>webpack + npm scripts</td>\n<td>说是构建工具有点过，但二者组合勉强算吧，loader和plugin机制还是非常强大的</td>\n<td>流行而已</td>\n</tr>\n</tbody>\n</table>\n<p>构建工具都不会特别复杂，所以Node.js世界里有非常多的实现，还有人写过node版本的make呢，玩的很嗨</p>\n<h3>HTTP Proxy</h3>\n<ul>\n<li>请求代理</li>\n<li>SSR &amp;&amp; PWA</li>\n<li>Api Proxy</li>\n</ul>\n<p>1）请求代理</p>\n<p>对于http请求复杂定制的时候，你是需要让Node.js来帮你的，比如为了兼容一个历史遗留需求，在访问某个CSS的时候必须提供HEADER才可以，如果放到静态server或cdn上是做不到的。</p>\n<p>2）SSR &amp;&amp; PWA</p>\n<p>SSR是服务器端渲染，PWA是渐进式Web应用，都是今年最火的技术。如果大家用过，一定对Node.js不陌生。比如React、Vuejs都是Node.js实现的ssr。至于pwa的service-worker也是Node.js实现的。那么为啥不用其他语言实现呢？不是其他语言不能实现，而是使用Node.js简单、方便、学习成本低，轻松获得高性能，如果用其他语言，我至少还得装环境</p>\n<p>3）Api Proxy</p>\n<p>产品需要应变，后端不好变，一变就要设计到数据库、存储等，可能引发事故。而在前端相对更容易，前端只负责组装服务，而非真正对数据库进行变动，所以只要服务api粒度合适，在前端来处理是更好的。</p>\n<p>Api的问题</p>\n<ul>\n<li>一个页面的Api非常多</li>\n<li>跨域，Api转发</li>\n<li>Api返回的数据对前端不友好，后端讨厌（应付）前端，几种api都懒得根据ui/ue去定制，能偷懒就偷懒</li>\n<li>需求决定Api，Api不一定给的及时</li>\n</ul>\n<p>所以，在前端渲染之余，加一层Api Proxy是非常必要的。淘宝早起曾公开过一张架构图，在今天看来，依然不过时</p>\n<p><img src=\"//dn-cnode.qbox.me/Fr8cGvus0i58atULAnoe-Cv4nu5m\" alt=\"taobao.jpg\"></p>\n<ul>\n<li>左侧半边，浏览器和Node.js Server通信可以有多种协议，HTML、RESTfull、BigPipe、Comet、Socket等，已经足够我们完成任何想做的事儿了</li>\n<li>右侧半边，是Node.js实现的WebServer，Node服务分了2个部分\n<ul>\n<li>常规的Http服务，即大块部分二</li>\n<li>ModelProxy指的是根据Server端的服务，组成并转化成自身的Model层。磨蹭用于为Http服务提供更好的接口</li>\n</ul>\n</li>\n</ul>\n<p>这里的Model Proxy其实就是我们所说的Api Proxy，这张图里只是说了结果，把聚合的服务转成模型，继而为HTTP服务提供Api。</p>\n<p>下面我们再深化一下Api Proxy的概念</p>\n<p><img src=\"//dn-cnode.qbox.me/FpAZo4aPQysJyciBvzUCU9uxb-vf\" alt=\"proxy.png\"></p>\n<p>这里的Node Proxy做了2件事儿，Api和渲染辅助。</p>\n<ul>\n<li>前端的异步ajax请求，可以直接访问Api</li>\n<li>如果是直接渲染或者bigpipe等协议的，需要在服务器端组装api，然后再返回给浏览器。</li>\n</ul>\n<p>所以Api后面还有一个服务组装，在微服务架构流行的今天，这种服务组装放到Node Proxy里的好处尤其明显。既可以提高前端开发效率，又可以让后端更加专注于服务开发。甚至如果前端团队足够大，可以在前端建一个Api小组，专门做服务集成的事儿。</p>\n<h3>Api服务</h3>\n<p>说完了Proxy，我们再看看利益问题。Node.js向后端延伸，必然会触动后端开发的利益。那么Proxy层的事儿，前后端矛盾的交界处，后端不想变，前端又求变，那么长此以往，Api接口会变得越来越恶心。后端是愿意把Api的事儿叫前端的，对后端来说，只要你不动我的数据库和服务就可以。</p>\n<p>但是Node.js能不能做这部分呢？答案是能的 ，这个是和Java、PHP类似的，一般是和数据库连接到一起，处理带有业务逻辑的。目前国内大部分都是以Java、PHP等为主，所以要想吃到这部分并不容易。</p>\n<ul>\n<li>小公司，创业公司，新孵化的项目更倾向于Node.js，简单，快速，高效</li>\n<li>微服务架构下的某些服务，使用Node.js开发，是比较合理的</li>\n</ul>\n<p>国内这部分一直没有做的很好，所以Node.js在大公司还没有很好的被应用，安全问题、生态问题、历史遗留问题等，还有很多人对Node.js的误解</p>\n<ul>\n<li>单线程很脆弱，这是事实，但单线程不等于不能多核并发，而且你还有集群呢</li>\n<li>运维，其实很简单，比其他语言之简单，日志采集、监控也非常简单</li>\n<li>模块稳定性，对于Mongodb、MySQL、Redis等还是相当不错，但其他的数据库支持可能没那么好。</li>\n<li>安全问题，</li>\n</ul>\n<p>这些对于提供Api服务来说已经足够了。</p>\n<h3>其他</h3>\n<table>\n<thead>\n<tr>\n<th>用途</th>\n<th>说明</th>\n<th>前景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>爬虫</td>\n<td>抢了不少Python的份额，整体来说简单，实用</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>命令行工具</td>\n<td>写工具、提高效率，node+npm真是无出其右</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微服务与RPC</td>\n<td>Node做纯后端不好做，但在新项目和微服务架构下，必有一席之地</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微信公众号开发</td>\n<td>已经火了2年多了，尤其是付费阅读领域，还会继续火下去，gitchat就是使用Node.js做的，而且还在招人</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>反向代理</td>\n<td>Node.js可以作为nginx这样的反向代理，虽然线上我们很少这样做，但它确确实实可以这样做。比如node-http-proxy和anyproxy等，其实使用Node.js做这种请求转发是非常简单的</td>\n<td>看涨</td>\n</tr>\n</tbody>\n</table>\n<h2>更好的写法</h2>\n<h3>Async函数与Promise</h3>\n<ul>\n<li>Async函数是趋势，Chrome 52. v8 5.1已经支持Async函数(<a href=\"https://github.com/nodejs/CTC/issues/7\">https://github.com/nodejs/CTC/issues/7</a>)了，Node.js 7.0+支持还会远么？</li>\n<li>Async和Generator函数里都支持promise，所以promise是必须会的。</li>\n<li>Generator和yield异常强大，不过不会成为主流，所以学会基本用法和promise就好了，没必要所有的都必须会。</li>\n<li>co作为Generator执行器是不错的，它更好的是当做Promise 包装器，通过Generator支持yieldable，最后返回Promise，是不是有点无耻？</li>\n</ul>\n<p>我整理了一张图，更直观一些。</p>\n<p><img src=\"//dn-cnode.qbox.me/FkcPwxdGHSCHFvA2nU0ub0zYNRt4\" alt=\"async-all.png\"></p>\n<ul>\n<li>红色代表Promise，是使用最多的，无论async还是generator都可用</li>\n<li>蓝色是Generator，过度货</li>\n<li>绿色是Async函数，趋势</li>\n</ul>\n<p><strong>结论</strong>：Promise是必须会的，那你为什么不顺势而为呢？</p>\n<p><strong>推荐</strong>：使用Async函数 + Promise组合，如下图所示。</p>\n<p><img src=\"//dn-cnode.qbox.me/FhVQF1FKB6sNkoFTc3gU-SVnkGtm\" alt=\"async-suggest.png\"></p>\n<p><strong>实践</strong></p>\n<p>合理的结合Promise和Async函数是可以非常高效的，但也要因场景而异</p>\n<ul>\n<li>Promise更容易做promisefyAll（比如使用bluebird）</li>\n<li>Async函数无法批量操作</li>\n</ul>\n<p>那么，在常见的Web应用里，我们总结的实践是，dao层使用Promise比较好，而service层，使用Async/Await更好。</p>\n<p>dao层使用Promise：</p>\n<ul>\n<li>crud</li>\n<li>单一模型的方法多</li>\n<li>库自身支持Promise</li>\n</ul>\n<p>这种用promisefyAll基本几行代码就够了，一般单一模型的操作，不会特别复杂，应变的需求基本不大。</p>\n<p>而service层一般是多个Model组合操作，多模型操作就可以拆分成多个小的操作，然后使用Await来组合，看起来会更加清晰，另外对需求应变也是非常容易的。</p>\n<h3>ES.next</h3>\n<blockquote>\n<p>Node.js + ES.next = ♥</p>\n</blockquote>\n<h3>Flow &amp;&amp; TypeScript</h3>\n<blockquote>\n<p>Type Systems Will Make You a Better JavaScript Developer</p>\n</blockquote>\n<h3>ES6模块</h3>\n<p>现在ES6自带了模块标准， 也是JS第一次支持module（之前的CommonJS、AMD、CMD都不算）， 但目前的所有Node.js版本都没有支持，目前只能用用Traceur、BabelJS， 或者TypeScript把ES6代码转化为兼容ES5版本的js代码，ES6模块新特性非常吸引人，下面简要说明。</p>\n<p>ES6 模块的目标是创建一个同时兼容CommonJS和AMD的格式，语法更加紧凑，通过编译时加载，使得编译时就能确定模块的依赖关系，效率要比 CommonJS 模块的加载方式高。而对于异步加载和配置模块加载方面，则借鉴AMD规范，其效率、灵活程度都远远好于CommonJS写法。</p>\n<ul>\n<li>语法更紧凑</li>\n<li>结构更适于静态编译（比如静态类型检查，优化等）</li>\n<li>对于循环引用支持更好</li>\n</ul>\n<p>ES6 模块标准只有2部分，它的用法更简单，你根本不需要关注实现细节:</p>\n<ul>\n<li>声明式语法：模块导入import、导出export，没有require了</li>\n<li>程式化加载API：可以配置模块是如何加载，以及按需加载。</li>\n</ul>\n<h3>多模块管理器：Lerna</h3>\n<blockquote>\n<p>A tool for managing JavaScript projects with multiple packages.</p>\n</blockquote>\n<p><a href=\"https://lernajs.io/\">https://lernajs.io/</a></p>\n<p>在设计框架的时候，经常做的事儿是进行模块拆分，继而提供插件或集成机制，这样是非常好的做法。但问题也随之而来，当你的模块模块非常多时，你该如何管理你的模块呢？</p>\n<ul>\n<li>法1：每个模块都建立独立的仓库</li>\n<li>法2：所有模块都放到1个仓库里</li>\n</ul>\n<p>法1虽然看起来干净，但模块多时，依赖安装，不同版本兼容等，会导致模块间依赖混乱，出现非常多的重复依赖，极其容易造成版本问题。这时法2就显得更加有效，对于测试，代码管理，发布等，都可以做到更好的支持。</p>\n<p>Lerna就是基于这种初衷而产生的专门用于管理Node.js多模块的工具，当然，前提是你有很多模块需要管理。</p>\n<p>你可以通过npm全局模块来安装Lerna，官方推荐直接使用Lerna 2.x版本</p>\n<h3>更好的NPM替代品：Yarn</h3>\n<p>Yarn是开源JavaScript包管理器，由于npm在扩展内部使用时遇到了大小、性能和安全等问题，Facebook携手来自Exponent、Google和Tilde的工程师，在大型JavaScript框架上打造和测试了Yarn，以便其尽可能适用于多人开发。Yarn承诺比各大流行npm包的安装更可靠，且速度更快。根据你所选的工作包的不同，Yarn可以将安装时间从数分钟减少至几秒钟。Yarn还兼容npm注册表，但包安装方法有所区别。其使用了lockfiles和一个决定性安装算法，能够为参与一个项目的所有用户维持相同的节点模块（node_modules）目录结构，有助于减少难以追踪的bug和在多台机器上复制。</p>\n<p>Yarn还致力于让安装更快速可靠，支持缓存下载的每一个包和并行操作，允许在没有互联网连接的情况下安装（如果此前有安装过的话）。此外，Yarn承诺同时兼容npm和Bower工作流，让你限制安装模块的授权许可。</p>\n<p>2016年10月份, Yarn在横空出世不到一周的时间里，github上的star数已经过万，可以看出大厂及社区的活跃度，以及解决问题的诚意，大概无出其右了！</p>\n<p>替换的原因</p>\n<ul>\n<li>在Facebook的大规模 npm 都工作的不太好</li>\n<li>npm拖慢了公司的ci工作流</li>\n<li>对一个检查所有的模块也是相当低效的</li>\n<li>npm被设计为是不确定性的，而Facebook工程师需要为他们的DevOps工作流提供一直和可依赖的系统</li>\n</ul>\n<p>与hack npm限制的做法相反，Facebook编写了Yarn</p>\n<ul>\n<li>Yarn 的本地缓存文件做的更好</li>\n<li>Yarn 可以并行它的一些操作，这加速了对新模块的安装处理</li>\n<li>Yarn 使用lockfiles，并用确定的算法来创建一个所有跨机器上都一样的文件</li>\n<li>出于安全考虑，在安装进程里，Yarn 不允许编写包的开发者去执行其他代码</li>\n</ul>\n<blockquote>\n<p>Yarn, which promises to even give developers that don’t work at Facebook’s scale a major performance boost, still uses the npm registry and is essentially a drop-in replacement for the npm client.</p>\n</blockquote>\n<p>很多人说和ruby的gem机制类似，都生成lockfile。确实是一个很不错的改进，在速度上有很大改进，配置cnpm等国内源来用，还是相当爽的。</p>\n<h3>友好语言</h3>\n<ul>\n<li>过气的Coffeescript，不多说</li>\n<li><a href=\"https://babeljs.io/\">Babel</a> - also an ES6 to ES5 transpiler that’s growing in popularity possibly because it also supports React’s JSX syntax. As of today it supports the most ES6 features at a somewhat respectable 73%.</li>\n<li><a href=\"http://www.typescriptlang.org/\">TypeScript</a> - a typed superset of JavaScript that not only compiles ES6 to ES5 (or even ES3) but also supports optional variable typing. TypeScript only supports 53% of ES6 features.</li>\n</ul>\n<h2>总结</h2>\n<blockquote>\n<p>坦诚的力量是无穷的</p>\n</blockquote>\n<p>Node.js是为异步而生的，它自己把复杂的事儿做了（高并发，低延时），交给用户的只是有点难用的Callback写法。也正是坦诚的将异步回调暴露出来，才有更好的流程控制方面的演进。也正是这些演进，让Node.js从DIRT（数据敏感实时应用）扩展到更多的应用场景，今天的Node.js已经不只是能写后端的JavaScript，已经涵盖了所有涉及到开发的各个方面，而Node全栈更是热门种的热门。</p>\n<p>直面问题才能有更好的解决方式，Node.js你值得拥有！</p>\n</div>",
        "title": "2017，我们来聊聊 Node.js",
        "last_reply_at": "2017-06-06T05:03:23.092Z",
        "good": true,
        "top": true,
        "reply_count": 81,
        "visit_count": 22600,
        "create_at": "2017-04-13T02:41:41.818Z",
        "author": {
            "loginname": "i5ting",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
        },
        "replies": [
            {
                "id": "58eee799a92d341e48cfe7fe",
                "author": {
                    "loginname": "fronteason",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/25839341?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>第四代手机</p>\n</div>",
                "ups": [
                    "577ca013abe83317060260ca",
                    "582e86676efc292b79ff0a7b",
                    "58f84347bbaf2f3f569be088",
                    "58a3c0b1f1c732c53643a390",
                    "59159c193504ce1c2ac45bc0",
                    "591d587bd371b6372a8afb3f",
                    "59081b4093aa348e3d40e793"
                ],
                "create_at": "2017-04-13T02:51:05.943Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eeea40c749f63d48fe9427",
                "author": {
                    "loginname": "hyj1991",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/19908330?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>赞，其实现在Node的框架很多很多，js的写法也极大丰富，但是从13，14年或者更早那会走过来的也许能更理解原理性质的东西，因为那会现成的东西少，很多要自己琢磨。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088",
                    "58a3c0b1f1c732c53643a390",
                    "591a7678d371b6372a8afa36"
                ],
                "create_at": "2017-04-13T03:02:24.214Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eeeba5a92d341e48cfe804",
                "author": {
                    "loginname": "caiya",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/12036572?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>node全栈的开发岗位也貌似多了些</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088",
                    "58a3c0b1f1c732c53643a390",
                    "57247b795a26c4a841ecbf1c"
                ],
                "create_at": "2017-04-13T03:08:21.118Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eeecdca92d341e48cfe807",
                "author": {
                    "loginname": "justbecoder",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/21071133?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>JS必将一通，走向全栈！</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-13T03:13:32.293Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eef4c649056f0348347868",
                "author": {
                    "loginname": "Huqiuwei",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/20388137?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>希望node.js越来越好</p>\n</div>",
                "ups": [
                    "592f913603dba3510d8a627b"
                ],
                "create_at": "2017-04-13T03:47:18.127Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eef575c749f63d48fe9433",
                "author": {
                    "loginname": "Qiubaowei",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/19163849?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>mark</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088",
                    "592f913603dba3510d8a627b"
                ],
                "create_at": "2017-04-13T03:50:13.048Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eef63ae54976e847e09fec",
                "author": {
                    "loginname": "FlyerJay",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/16186429?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>最近有点迷惘，看了你的分析豁然开朗，继续坚持node全栈</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088",
                    "56679edc5af0e6ab3bf1a188",
                    "586df811df04f6ab76081db0"
                ],
                "create_at": "2017-04-13T03:53:30.380Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58eef6f849056f034834786a",
                "author": {
                    "loginname": "artisan",
                    "avatar_url": "//gravatar.com/avatar/09e5334324ec81849c7c07ab5a926757?size=48"
                },
                "content": "<div class=\"markdown-text\"><blockquote>\n<p>Node.js 7.0+支持还会远么\n这本书半年前写的吧，现在马上8.0了</p>\n</blockquote>\n</div>",
                "ups": [
                    "5593870b9418ff516f650f4b",
                    "58f84347bbaf2f3f569be088",
                    "59223ae1d371b6372a8afc0e"
                ],
                "create_at": "2017-04-13T03:56:40.671Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58ef06a9e54976e847e09ffc",
                "author": {
                    "loginname": "TakWolf",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/6064962?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>mark</p>\n<p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p>\n</div>",
                "ups": [
                    "5593870b9418ff516f650f4b"
                ],
                "create_at": "2017-04-13T05:03:37.428Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58ef63a449056f034834789a",
                "author": {
                    "loginname": "xcatliu",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/5453359?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>感谢分享，写的非常好！</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088",
                    "59223ae1d371b6372a8afc0e"
                ],
                "create_at": "2017-04-13T11:40:20.092Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58ef6dc849056f034834789c",
                "author": {
                    "loginname": "norfish",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/1826235?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>不知道坛子里有人深度使用ssr没，今年一个是node7，一个是SSR</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-13T12:23:36.439Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58ef7f0749056f03483478a1",
                "author": {
                    "loginname": "Jimberton-js",
                    "avatar_url": "https://avatars.githubusercontent.com/u/11454938?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>赞我大js之天威！</p>\n</div>",
                "ups": [],
                "create_at": "2017-04-13T13:37:11.267Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58effbf749056f03483478ac",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/norfish\">@norfish</a> 文章有提到，ssr和pwa是今年继续火的点，今年最亮瞎眼的是对asynch函数的支持</p>\n</div>",
                "ups": [],
                "create_at": "2017-04-13T22:30:15.848Z",
                "reply_id": "58ef6dc849056f034834789c",
                "is_uped": false
            },
            {
                "id": "58f00bfaa92d341e48cfe834",
                "author": {
                    "loginname": "dbit-xia",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/19259623?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>好长(✪▽✪)，昨晚看到早上</p>\n<p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p>\n</div>",
                "ups": [
                    "58a3c0b1f1c732c53643a390"
                ],
                "create_at": "2017-04-13T23:38:34.848Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f00c5cc749f63d48fe948e",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/dbit-xia\">@dbit-xia</a> 你这是卧铺票啊，哈哈</p>\n</div>",
                "ups": [],
                "create_at": "2017-04-13T23:40:12.626Z",
                "reply_id": "58f00bfaa92d341e48cfe834",
                "is_uped": false
            },
            {
                "id": "58f020bbe54976e847e0a035",
                "author": {
                    "loginname": "wujohns",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/4157244?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>为何没有提到这个神器：<a href=\"http://caolan.github.io/async/\">http://caolan.github.io/async/</a></p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T01:07:07.650Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f02398e54976e847e0a037",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/wujohns\">@wujohns</a> 异步流程里它是个好用的工具而已，还不够资格，归到promise之前</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T01:19:20.095Z",
                "reply_id": "58f020bbe54976e847e0a035",
                "is_uped": false
            },
            {
                "id": "58f0306e49056f03483478b2",
                "author": {
                    "loginname": "Harveytwo",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/16117855?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>大node，厉害</p>\n<p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:14:06.856Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f030d4e54976e847e0a046",
                "author": {
                    "loginname": "wujohns",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/4157244?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/i5ting\">@i5ting</a> 灵活度比promise高了不止一点两点，对比后我这边几乎已经弃用promise以及async/await（只作为理解看别人的代码时使用）</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:15:48.843Z",
                "reply_id": "58f02398e54976e847e0a037",
                "is_uped": false
            },
            {
                "id": "58f0316949056f03483478b4",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/wujohns\">@wujohns</a> 社区大趋势，不必挣扎，哈哈</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:18:17.081Z",
                "reply_id": "58f030d4e54976e847e0a046",
                "is_uped": false
            },
            {
                "id": "58f0333c49056f03483478ba",
                "author": {
                    "loginname": "wujohns",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/4157244?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/i5ting\">@i5ting</a> 终有返璞归真的一天— —*</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:26:04.804Z",
                "reply_id": "58f0316949056f03483478b4",
                "is_uped": false
            },
            {
                "id": "58f033e8a92d341e48cfe846",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/wujohns\">@wujohns</a> 全是async/await，哦也</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:28:56.279Z",
                "reply_id": "58f0333c49056f03483478ba",
                "is_uped": false
            },
            {
                "id": "58f038d2a92d341e48cfe84c",
                "author": {
                    "loginname": "alsotang",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/1147375?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/wujohns\">@wujohns</a> 用同步的思维写代码，那才是更大层面的返璞归真。callback只是js社区的真，大部分其他语言都是用同步语法处理io的。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T02:49:54.812Z",
                "reply_id": "58f0333c49056f03483478ba",
                "is_uped": false
            },
            {
                "id": "58f0587149056f03483478c9",
                "author": {
                    "loginname": "haungdongshan1",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/9417971?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>Node 做IM还是有点略尴尬。socket.io到现在也没看到重量级的产品。</p>\n<p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p>\n</div>",
                "ups": [
                    "577ca013abe83317060260ca",
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T05:04:49.092Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f063bda92d341e48cfe85c",
                "author": {
                    "loginname": "gfafei",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/12234890?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>js的回调确实是个门槛，但理解了之后也没那么可怕。即使有了async/await，也不可能在不理解回调的情形下用同步的思维写代码吧。</p>\n</div>",
                "ups": [
                    "58dc7cb3b3e60b982d089d1d",
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T05:53:01.528Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f080c0a92d341e48cfe878",
                "author": {
                    "loginname": "wujohns",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/4157244?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/alsotang\">@alsotang</a> 但其他语言实现异步就比js的callback要麻烦些了</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T07:56:48.433Z",
                "reply_id": "58f038d2a92d341e48cfe84c",
                "is_uped": false
            },
            {
                "id": "58f0a2ca49056f03483478f5",
                "author": {
                    "loginname": "ichengweb",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/10717953?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>厉害</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-14T10:22:02.775Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f338e2a92d341e48cfe8d9",
                "author": {
                    "loginname": "microzz",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/19163507?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>赞</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-16T09:26:58.482Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f41f7e9116585a56e20625",
                "author": {
                    "loginname": "lcoder",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5225853?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>jade 早就改名pug了吧</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-17T01:50:54.283Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f4220b523b9d0956dad637",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/lcoder\">@lcoder</a> 是的</p>\n</div>",
                "ups": [
                    "57f5d52cd547294d6a470822",
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-17T02:01:47.218Z",
                "reply_id": "58f41f7e9116585a56e20625",
                "is_uped": false
            },
            {
                "id": "58f43ae6dcf050245694085c",
                "author": {
                    "loginname": "5104020942",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/8674904?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>感觉前端要改变世界的节奏</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-17T03:47:50.190Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f4fcbf9116585a56e20695",
                "author": {
                    "loginname": "pinxue",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/958237?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>不提一下 stdlib/seneca 什么的么？</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-17T17:34:55.376Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f575b39116585a56e206a6",
                "author": {
                    "loginname": "arden",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/11365?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"https://github.com/hemerajs/hemera\">https://github.com/hemerajs/hemera</a>\n这个感觉比seneca更好。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T02:10:59.310Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f5883dbbaf2f3f569bdf70",
                "author": {
                    "loginname": "pinxue",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/958237?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/arden\">@arden</a> 嘻嘻，看这个 <a href=\"https://github.com/senecajs/seneca/issues/593\">https://github.com/senecajs/seneca/issues/593</a></p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T03:30:05.724Z",
                "reply_id": "58f575b39116585a56e206a6",
                "is_uped": false
            },
            {
                "id": "58f5a8829116585a56e206d5",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/pinxue\">@pinxue</a> dnode/seneca/gprc是要讲的，在API proxy层，稍后会详细说</p>\n</div>",
                "ups": [
                    "580c50b1541dfb7b50f40acd",
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T05:47:46.667Z",
                "reply_id": "58f5883dbbaf2f3f569bdf70",
                "is_uped": false
            },
            {
                "id": "58f5f13adcf0502456940913",
                "author": {
                    "loginname": "arden",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/11365?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/pinxue\">@pinxue</a> 不过感觉rpc方案最好是要跨语言跨平台的，从这点来看只有grpc是比较优的方案。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T10:58:02.445Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f61195bbaf2f3f569bdfd6",
                "author": {
                    "loginname": "ben1226q",
                    "avatar_url": "https://avatars.githubusercontent.com/u/3993644?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>这个rpc方案好\n\r&lt;br&gt;&lt;br&gt;来自&lt;a href=“<a href=\"https://lzxb.github.io/react-cnode/\">https://lzxb.github.io/react-cnode/</a>” target=&quot;_blank&quot;&gt;react-cnode手机版&lt;/a&gt;</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T13:16:05.682Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f6545f9116585a56e20730",
                "author": {
                    "loginname": "pinxue",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/958237?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/arden\">@arden</a> Seneca 并不只是一个 rpc 方案，比如很多人用是为了耍那个 SWIM gossip 协议组 Mesh 网络。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-18T18:01:03.086Z",
                "reply_id": "58f5f13adcf0502456940913",
                "is_uped": false
            },
            {
                "id": "58f6b459bbaf2f3f569bdfe4",
                "author": {
                    "loginname": "VarDking",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/12530526?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>写的不错</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-19T00:50:33.343Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f70bad523b9d0956dad739",
                "author": {
                    "loginname": "rwing",
                    "avatar_url": "//gravatar.com/avatar/af73bb3077950d1c01e19d5e6a1a1281?size=48"
                },
                "content": "<div class=\"markdown-text\"><p>文章写的非常棒</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-19T07:03:09.393Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f785e59116585a56e207a4",
                "author": {
                    "loginname": "zy445566",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/14976489?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/i5ting\">@i5ting</a>\n狼叔 已无性能优势？ 这一段php swolo是什么，我读书少，只知道PHP有个swoole，不知道swolo是什么？望狼叔教育</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-19T15:44:37.362Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58f8408d31e8c2bb1c3dcbd7",
                "author": {
                    "loginname": "artgou",
                    "avatar_url": "//gravatar.com/avatar/b83a9b3a95ba5a7c97c38e610816aede?size=48"
                },
                "content": "<div class=\"markdown-text\"><p>深刻，谢谢</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-20T05:01:01.769Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58fafb84bbaf2f3f569be12c",
                "author": {
                    "loginname": "gzhangzy",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/7035683?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>dnode还是值得看的</p>\n</div>",
                "ups": [
                    "54009f5ccd66f2eb37190485",
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-22T06:43:16.327Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58fb189731e8c2bb1c3dccad",
                "author": {
                    "loginname": "Sinclair8023",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/24488319?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>写的很棒</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-22T08:47:19.270Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58fc0fe19116585a56e208c3",
                "author": {
                    "loginname": "riyueweiyi",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/12229109?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>node</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-23T02:22:25.123Z",
                "reply_id": "58fb189731e8c2bb1c3dccad",
                "is_uped": false
            },
            {
                "id": "58fc11999116585a56e208c5",
                "author": {
                    "loginname": "riyueweiyi",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/12229109?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>招不到人</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-23T02:29:45.011Z",
                "reply_id": "58eeeba5a92d341e48cfe804",
                "is_uped": false
            },
            {
                "id": "58fc916431e8c2bb1c3dcd1d",
                "author": {
                    "loginname": "rebornchris",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/13329178?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>漂亮</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-23T11:35:00.903Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "58fd6e7731e8c2bb1c3dcd5e",
                "author": {
                    "loginname": "YAOHAO9",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/10281025?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/riyueweiyi\">@riyueweiyi</a> 哪里？可能是工资太低，福利不够好</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-24T03:18:15.861Z",
                "reply_id": "58fc11999116585a56e208c5",
                "is_uped": false
            },
            {
                "id": "58fd76cdbbaf2f3f569be1cb",
                "author": {
                    "loginname": "gongyonghui",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/23306101?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>真棒</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-24T03:53:49.185Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "59054c7cbbaf2f3f569be411",
                "author": {
                    "loginname": "mengLLLL",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/13366294?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>写的真的很赞，学习了</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-04-30T02:31:24.361Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "590965fbbbaf2f3f569be4ca",
                "author": {
                    "loginname": "oogou11",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/20698868?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>文章新的很好，感谢作者分享，不过相比较而言 为什么Python 所占的优势更大呢？  比如我现在的公司，几乎全部用Python作为服务端，我比较喜欢nodejs 所以一直关注着。</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-05-03T05:09:15.323Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "59096c1ebbaf2f3f569be4ce",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/oogou11\">@oogou11</a> 这是很正常的，技术选型和阶段和领导是相关的，所以不必去过分在意，能出好产品的都是好的技术。未来技术大融合，一定会多元化的，所以node会在你的公司有一席之地的，只是早晚</p>\n</div>",
                "ups": [
                    "58feabf4523b9d0956dad9a1",
                    "58edb837e54976e847e09f84",
                    "58f84347bbaf2f3f569be088",
                    "5912b26a9e32cc84569a6d44"
                ],
                "create_at": "2017-05-03T05:35:26.939Z",
                "reply_id": "590965fbbbaf2f3f569be4ca",
                "is_uped": false
            },
            {
                "id": "59106ce13504ce1c2ac4599d",
                "author": {
                    "loginname": "chaos2171053",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/12230868?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>写的很棒来自chaos的小霸王</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-05-08T13:04:33.798Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591129119e32cc84569a6c91",
                "author": {
                    "loginname": "oogou11",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/20698868?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/i5ting\">@i5ting</a>   6666</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-05-09T02:27:29.017Z",
                "reply_id": "59096c1ebbaf2f3f569be4ce",
                "is_uped": false
            },
            {
                "id": "59151b3c3504ce1c2ac45b12",
                "author": {
                    "loginname": "Andy-007",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/23308188?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/TakWolf\">@TakWolf</a> 1122</p>\n</div>",
                "ups": [
                    "58f84347bbaf2f3f569be088"
                ],
                "create_at": "2017-05-12T02:17:32.052Z",
                "reply_id": "58ef06a9e54976e847e09ffc",
                "is_uped": false
            },
            {
                "id": "59195d7cba8670562a40f125",
                "author": {
                    "loginname": "Miantang",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3156907?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><blockquote>\n<p>Generator和yield异常强大，不过不会成为主流</p>\n</blockquote>\n<p>我有个问题想请教一下，这句话为什么这么说？</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-15T07:49:16.151Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "59195eb13504ce1c2ac45c6b",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/Miantang\">@Miantang</a> 本来是做什么的就该去做什么，Generator就该去做计算用，哈哈</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-15T07:54:25.314Z",
                "reply_id": "59195d7cba8670562a40f125",
                "is_uped": false
            },
            {
                "id": "591976bd3504ce1c2ac45c79",
                "author": {
                    "loginname": "wuyafeiJS",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/22020113?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>支持</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-15T09:37:01.550Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591976e3d371b6372a8af9f7",
                "author": {
                    "loginname": "wuyafeiJS",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/22020113?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>test</p>\n</div>",
                "ups": [
                    "57cd2c68a843659126f98cdb"
                ],
                "create_at": "2017-05-15T09:37:39.365Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5919772e9e32cc84569a6fb0",
                "author": {
                    "loginname": "wuyafeiJS",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/22020113?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>test02</p>\n</div>",
                "ups": [
                    "57cd2c68a843659126f98cdb"
                ],
                "create_at": "2017-05-15T09:38:54.092Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5919b9e7ba8670562a40f145",
                "author": {
                    "loginname": "fronteason",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/25839341?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>谷歌的V8引擎才能造就了NodeJS …</p>\n</div>",
                "ups": [
                    "582dd261892500ee7867c017"
                ],
                "create_at": "2017-05-15T14:23:35.460Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591aca379e32cc84569a7016",
                "author": {
                    "loginname": "brucewar",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/4013475?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><h1>mark</h1>\n</div>",
                "ups": [
                    "59270606855efbac2cf7a386"
                ],
                "create_at": "2017-05-16T09:45:27.091Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591bb7949e32cc84569a7059",
                "author": {
                    "loginname": "godlike110",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/7553400?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>‘’’  mark ‘’’\n\r&lt;br&gt;&lt;br&gt;来自&lt;a href=“<a href=\"https://lzxb.github.io/react-cnode/\">https://lzxb.github.io/react-cnode/</a>” target=&quot;_blank&quot;&gt;react-cnode手机版&lt;/a&gt;</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-17T02:38:12.519Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591be0b8d371b6372a8afac5",
                "author": {
                    "loginname": "stjw7098",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/23471654?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>写的很好</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-17T05:33:44.183Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "591d50e03504ce1c2ac45de7",
                "author": {
                    "loginname": "jokerapi",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/19544032?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>mark</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-18T07:44:32.838Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5923d0799e32cc84569a725b",
                "author": {
                    "loginname": "E-GreeHe",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/26704801?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>赞</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-23T06:02:33.951Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5924c7fc9e32cc84569a7294",
                "author": {
                    "loginname": "YuJiusihuanian",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/21097145?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>mark</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-23T23:38:36.321Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "592529edba8670562a40f423",
                "author": {
                    "loginname": "anth-angle",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/22729058?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/E-GreeHe\">@E-GreeHe</a> mark</p>\n</div>",
                "ups": [],
                "create_at": "2017-05-24T06:36:29.471Z",
                "reply_id": "5923d0799e32cc84569a725b",
                "is_uped": false
            },
            {
                "id": "59253428ba8670562a40f431",
                "author": {
                    "loginname": "solee0524",
                    "avatar_url": "https://avatars1.githubusercontent.com/u/683062?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>我们已经用Koa2写纯后端很久了 配合pm2 稳定资源占用小。很庆幸当年从Java毅然转到了Node，不是说Java不好但是Node快速部署和实现真的让我觉得赏心悦目。</p>\n</div>",
                "ups": [
                    "54009f5ccd66f2eb37190485",
                    "591462379e32cc84569a6dd0"
                ],
                "create_at": "2017-05-24T07:20:08.461Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5930e3e864c9781e4812c90d",
                "author": {
                    "loginname": "jiangmeixian",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/26613742?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/fronteason\">@fronteason</a> 1</p>\n</div>",
                "ups": [],
                "create_at": "2017-06-02T04:04:56.932Z",
                "reply_id": "58eee799a92d341e48cfe7fe",
                "is_uped": false
            },
            {
                "id": "5930e4169a99de3b489289b1",
                "author": {
                    "loginname": "jiangmeixian",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/26613742?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>1</p>\n</div>",
                "ups": [],
                "create_at": "2017-06-02T04:05:42.971Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5930e71464c9781e4812c916",
                "author": {
                    "loginname": "i5ting",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p><a href=\"/user/jiangmeixian\">@jiangmeixian</a> 无意义评论，封号</p>\n</div>",
                "ups": [],
                "create_at": "2017-06-02T04:18:28.879Z",
                "reply_id": "5930e4169a99de3b489289b1",
                "is_uped": false
            },
            {
                "id": "59322ed2073aa90148d8c37a",
                "author": {
                    "loginname": "lnsane",
                    "avatar_url": "https://avatars3.githubusercontent.com/u/20310872?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>收藏****</p>\n</div>",
                "ups": [],
                "create_at": "2017-06-03T03:36:50.688Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5934c9645b07c1b24afa0688",
                "author": {
                    "loginname": "MaYuning",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/28948425?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>挺好</p>\n</div>",
                "ups": [
                    "5926df21ba8670562a40f4fd"
                ],
                "create_at": "2017-06-05T03:00:52.228Z",
                "reply_id": null,
                "is_uped": false
            },
            {
                "id": "5936379bdfbb657c2a05ca52",
                "author": {
                    "loginname": "1416759661",
                    "avatar_url": "https://avatars2.githubusercontent.com/u/19246318?v=3&s=120"
                },
                "content": "<div class=\"markdown-text\"><p>非常详细！刚建了个QQ群 189987746 欢迎初学的朋友一起讨论。</p>\n</div>",
                "ups": [],
                "create_at": "2017-06-06T05:03:23.080Z",
                "reply_id": null,
                "is_uped": false
            }
        ],
        "is_collect": false
    }
}