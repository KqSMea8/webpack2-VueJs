{
    "success": true,
    "data": [
        {
            "id": "592917b59e32cc84569a7458",
            "author_id": "54009f5ccd66f2eb37190485",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>本来提供开发api，目的是为了开发第三方应用或客户端，如果大家用来学习也是好的，但现在很多人太过分了，随意发帖，at，严重影响了社区的用户，故而决定开始严查</p>\n<p>以下情况，直接封号</p>\n<ul>\n<li>测试标题</li>\n<li>无任何内容</li>\n<li>无意义回复</li>\n<li>测试帖，5分钟内没有删除</li>\n</ul>\n<p>欢迎大家监督</p>\n<p>封号</p>\n<ul>\n<li><a href=\"https://cnodejs.org/user/Mwangzhi\">https://cnodejs.org/user/Mwangzhi</a></li>\n<li><a href=\"https://cnodejs.org/user/lw6395\">https://cnodejs.org/user/lw6395</a></li>\n<li><a href=\"https://cnodejs.org/user/shengliang74\">https://cnodejs.org/user/shengliang74</a>  竟然挑衅，发帖说你来打我呀。。。。</li>\n<li><a href=\"https://cnodejs.org/user/h5-17\">https://cnodejs.org/user/h5-17</a></li>\n</ul>\n<hr>\n<p>20170601更新</p>\n<p><a href=\"https://cnodejs.org/?tab=dev\">https://cnodejs.org/?tab=dev</a>  目前开了一个『客户端测试』专区，以后开发新客户端的同学，帖子直接发到这个专区去。tab 的值是 dev。</p>\n<p><img src=\"//dn-cnode.qbox.me/FundjyBuYk60yqQ-PdKstrPKY-7-\" alt=\"image.png\"></p>\n</div>",
            "title": "测试请发到客户端测试专区，违规影响用户的，直接封号",
            "last_reply_at": "2017-06-05T12:12:25.728Z",
            "good": false,
            "top": true,
            "reply_count": 26,
            "visit_count": 2694,
            "create_at": "2017-05-27T06:07:49.278Z",
            "author": {
                "loginname": "i5ting",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
            }
        },
        {
            "id": "58eee565a92d341e48cfe7fc",
            "author_id": "54009f5ccd66f2eb37190485",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1>2017，我们来聊聊 Node.js</h1>\n<h2>版本帝？</h2>\n<p>Chrome浏览器已经蹦到57版本了，是名副其实的版本帝，作为兄弟的Node.js也一样，1.0之前等了6年，而从1.0到8.0，只用了2年时间，这世界到底怎么了？</p>\n<p>我们就数一下</p>\n<ul>\n<li>从v0.1到0.12用了6年</li>\n<li>2015-01-14发布了v1.0.0版本（io.js）</li>\n<li>2.x（io.js）</li>\n<li>3.x（io.js）</li>\n<li>2015年09月Node.js基金会已发布Node.js V4.0版 与io.js合并后的第一个版本</li>\n<li>2015年10月Node.jsv4.2.0将是首个lts长期支持版本</li>\n<li>2016年底发布到4.2.4 &amp;&amp; 5.4.0</li>\n<li>2016年3月20日v4.4.0 LTS（长期支持版本）和v5.9.0 Stable（稳定版本）</li>\n<li>2016 年底 v6.0 支持95%以上的es6特性 ， v7.0通过flag支持async函数，99%的es6特性</li>\n<li>2017年2月发布v7.6版本，可以不通过flag使用async函数</li>\n</ul>\n<p><img src=\"//dn-cnode.qbox.me/Fv8fvViUeOJpBlOWYzBo1txRUhdN\" alt=\"lts-schedule.png\"></p>\n<p>整体来说趋于稳定</p>\n<ul>\n<li>成立了Node.js基金会，能够让Node.js在未来有更好的开源社区支持</li>\n<li>发布了LTS版本，意味着api稳定</li>\n<li>快速发版本，很多人吐槽这个，其实换个角度看，这也是社区活跃的一个体现，但如果大家真的看CHANGELOG，其实都是小改进，而且是边边角角的改进，也就是说Node.js的core（核心）已经非常稳定了，可以大规模使用</li>\n</ul>\n<h2>已无性能优势？</h2>\n<p>Node.js在2009年横空出世，可以说是纯异步获得高性能的功劳。所有语言几乎没有能够和它相比的，比如Java、PHP、Ruby都被啪啪的打脸。但是山一程，水一程，福祸相依，因为性能太出众，导致很多语言、编程模型上有更多探索，比如go语言产生、php里的swolo和vm改进等，大家似乎都以不支持异步为耻辱。后来的故事大家都知道了，性能都提到非常高，c10问题已经没人再考虑，只是大家实现早晚而产生的性能差距而已。</p>\n<blockquote>\n<p>编程语言的性能趋于一样的极限，所以剩下的选择，只有喜好</p>\n</blockquote>\n<p>那么在这种情况下，Node.js还有优势么？</p>\n<ul>\n<li>实现成本：Node.js除了异步流程控制稍复杂外，其他的都非常简单，比如写法，你可以面向过程、面向对象、函数式，根据自己的解决选择就好了。不要因为它现在变化快，就觉得自己跟不上潮流。尤其是后端程序员转Node.js几乎是2周以内的成本，某些语言光熟悉语法习惯也不止2周吧？</li>\n<li>调优成本：Node.js即使不优化，它的性能也非常好，如果优化，也比其他语言更简单</li>\n<li>学习成本：是否必须用，如果是必须要用，那就少学一样是一样，人生有限，不能都花在写hello world上。我想问，大前端离得开js么？</li>\n</ul>\n<blockquote>\n<p>误读：Node.js已无性能优势，它现在最强大的是基于npm的生态</p>\n</blockquote>\n<p>上面是成本上的比较，其实大家把关注点都转移到基于npm的生态上，截止2017年2月，在npm上有超过45万个模块，秒杀无数。npm是所有的开源的包管理里最强大的，我们说更了不起的Node.js，其实npm居功甚伟，后面会有独立的章节进行阐述。</p>\n<p>来自<a href=\"http://www.modulecounts.com/\">www.modulecounts.com</a>的各个包管理模块梳理的比较</p>\n<p><img src=\"//dn-cnode.qbox.me/FjmazMxffKETUdl9-NVoSqLB-DyT\" alt=\"Screen Shot 2017-04-04 at 21.02.41.png\">\nnpm生态是Node的优势不假，可是说“Node.js没有性能优势”真的对么？这其实就是误读，Node.js的性能依然很好呀，而且它有npm极其强大的生态，可谓性能与生态双剑合璧，你说你死不死？</p>\n<h2>异步和回调地狱？</h2>\n<blockquote>\n<p>天生异步，败也异步，成也异步</p>\n</blockquote>\n<p>正因为异步导致了api设计方式只能采用error-first风格的回调，于是大家硬生生的把callback写成了callback hell。于是各种黑粉就冒出来，无非是一些浅尝辄止之辈。但也正因为回调地狱是最差实践，所以大家才不得不求变，于是thunk、promise等纷沓而至。虽然Promise/A+不完美，但对于解决回调地狱是足够的了。而且随着ES6等规范实现，引入generator、co等，让异步越来越近于同步。当async函数落地的时候，Node已经站在了同C#、Python一样的高度上，大家还有什么理由黑呢？</p>\n<p>本小节先科普一下异步流程里的各种概念，后面会有独立章节进行详细讲解</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>Node.js API天生就是这样的</td>\n<td></td>\n</tr>\n<tr>\n<td>thunk</td>\n<td>参数的求值策略</td>\n<td></td>\n</tr>\n<tr>\n<td>promise</td>\n<td>最开始是Promise/A+规范，随后成为ES6标准</td>\n<td></td>\n</tr>\n<tr>\n<td>generator</td>\n<td>ES6种的生成器，用于计算，但tj想用做流程控制</td>\n<td></td>\n</tr>\n<tr>\n<td>co</td>\n<td>generator用起来非常麻烦，故而tj写了co这个generator生成器，用法更简单</td>\n<td></td>\n</tr>\n<tr>\n<td>async函数</td>\n<td>原本计划进入es7规范，结果差一点，但好在v8实现了，所以node 7就可以使用，无须等es7规范落地</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>有时，将一件事儿做到极致，也许能有另一种天地</p>\n</blockquote>\n<h2>应用场景</h2>\n<p>MEAN是一个Javascript平台的现代Web开发框架总称，它是MongoDB + Express +AngularJS + NodeJS 四个框架的第一个字母组合。它与传统LAMP一样是一种全套开发工具的简称。在2014和2015年喜欢讲这个，并且还有MEAN.js等框架，但今天已经过时，Node.js有了更多的应用场景。</p>\n<p>《Node.js in action》一书里说，Node所针对的应用程序有一个专门的简称：DIRT。它表示数据密集型实时（data-intensive real-time）程序。因为Node自身在I/O上非常轻量，它善于将数据从一个管道混排或代理到另一个管道上，这能在处理大量请求时持有很多开放的连接，并且只占用一小部分内存。它的设计目标是保证响应能力，跟浏览器一样。</p>\n<p>这话不假，但在今天来看，DIRT还是范围小了。其实DIRT本质上说的I/O处理的都算，但随着大前端的发展，Node.js已经不再只是I/O处理相关，而是更加的“Node”！</p>\n<p>这里给出Node.js的若干使用场景</p>\n<ul>\n<li>网站（如express/koa等）</li>\n<li>im即时聊天(<a href=\"http://socket.io\">socket.io</a>)</li>\n<li>api（移动端，pc，h5）</li>\n<li>HTTP Proxy（淘宝、Qunar、腾讯、百度都有）</li>\n<li>前端构建工具(grunt/gulp/bower/webpack/fis3…)</li>\n<li>写操作系统（NodeOS）</li>\n<li>跨平台打包工具（PC端的electron、nw.js，比如钉钉PC客户端、微信小程序IDE、微信客户端，移动的cordova，即老的Phonegap，还有更加有名的一站式开发框架ionicframework）</li>\n<li>命令行工具（比如cordova、shell.js）</li>\n<li>反向代理（比如anyproxy，node-http-proxy）</li>\n<li>编辑器Atom、VSCode等</li>\n</ul>\n<p>可以说目前大家能够看到的、用到的软件都有Node.js身影，当下最流行的软件写法也大都是基于Node.js的，比如PC客户端<a href=\"https://github.com/luin/medis\">luin/medis</a>采用electron打包，写法采用React+Redux。我自己一直的实践的【Node全栈】，也正是基于这种趋势而形成的。在未来，Node.js的应用场景会更加的广泛。更多参见<a href=\"https://github.com/sindresorhus/awesome-nodejs\">sindresorhus/awesome-nodejs</a>。</p>\n<h3>Web框架</h3>\n<p>演进时间线大致如下：</p>\n<ul>\n<li>2010年tj写的Express</li>\n<li>2011年Derby.js开始开发，8月5日，WalmartLabs的一位成员Eran Hammer提交了Hapi的第一次commit。Hapi原本是Postmile的一部分，并且最开始是基于Express构建的。后来它发展成自己自己的框架，</li>\n<li>2012年1月21日，专注于rest api的restify发布1.0版本，同构的meteor开始投入开发，最像rails的sails也开始了开发</li>\n<li>2013年tj开始玩generator，编写co这个generator执行器，并开始了Koa。2013 年下半年李成银开始ThinkJS，参考ThinkPHP</li>\n<li>2014年，4月9日，express发布4.0，进入4.x时代持续到今天，MEAN.js开始随着MEAN架构的提出开始开发，意图大一统，另外total.js开始，最像PHP’s Laravel 或 Python’s Django 或 <a href=\"http://ASP.NET\">ASP.NET</a> MVC的框架</li>\n<li>2015年8月22日， 下一代Web框架Koa发布1.0，可以在node 0.12下面，通过co + generator实现同步逻辑，那时候co还是基于thunkfy的，2015.10.30 ThinkJS发布了Es2015+ 特性开发的v 2.0版本</li>\n<li>2016 年 09 月，蚂蚁金服的eggjs，在 JSConf China 2016 上亮相并宣布开源</li>\n<li>2017年2月，下一代Web框架Koa发布2.0</li>\n</ul>\n<p>我们可以根据框架的特性进行分类</p>\n<table>\n<thead>\n<tr>\n<th>框架名称</th>\n<th>特性</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Express</td>\n<td>简单、实用，路由中间件等五脏俱全</td>\n<td>最著名的Web框架</td>\n</tr>\n<tr>\n<td>Derby.js &amp;&amp; Meteor</td>\n<td>同构</td>\n<td>前后端都放到一起，模糊了开发便捷，看上去更简单，实际上上对开发来说要求更高</td>\n</tr>\n<tr>\n<td>Sails、Total</td>\n<td>面向其他语言，Ruby、PHP等</td>\n<td>借鉴业界优秀实现，也是Node.js成熟的一个标志</td>\n</tr>\n<tr>\n<td>MEAN.js</td>\n<td>面向架构</td>\n<td>类似于脚手架，又期望同构，结果只是蹭了热点</td>\n</tr>\n<tr>\n<td>Hapi和Restfy</td>\n<td>面向Api &amp;&amp; 微服务</td>\n<td>移动互联网时代Api的作用被放大，故而独立分类。尤其是对于微服务开发更是利器</td>\n</tr>\n<tr>\n<td>ThinkJS</td>\n<td>面向新特性</td>\n<td>借鉴ThinkPHP，并慢慢走出自己的一条路，对于Async函数等新特性支持，无出其右</td>\n</tr>\n<tr>\n<td>Koa</td>\n<td>专注于异步流程改进</td>\n<td>下一代Web框架</td>\n</tr>\n</tbody>\n</table>\n<p>对于框架选型</p>\n<ul>\n<li>业务场景、特点，不必为了什么而什么，避免本末倒置</li>\n<li>自身团队能力、喜好，有时候技术选型决定团队氛围的，需要平衡激进与稳定</li>\n<li>出现问题的时候，有人能Cover的住，Node.js虽然8年历史，但模块完善程度良莠不齐，如果不慎踩到一个坑里，需要团队在无外力的情况能够搞定，否则会影响进度</li>\n</ul>\n<blockquote>\n<p>个人学习求新，企业架构求稳，无非喜好与场景而已</p>\n</blockquote>\n<p>我猜大家能够想到的场景，大约如下</p>\n<ul>\n<li>前端工具，比如gulp、grunt、webpack等</li>\n<li>服务器，做类似于Java、PHP的事儿</li>\n</ul>\n<p>如果只是做这些，和Java、PHP等就没啥区别了。如果再冠上更了不起的Node.js，就有点名不符实了。所以这里我稍加整理，看看和大家想的是否一样</p>\n<h3>技术栈演进</h3>\n<p>自从ES 2015（俗称ES 6）在Node.js 落地之后，整个Node.js开发都发生了翻天覆地的变化。自从0.10开始，Node.js就逐渐的加入了ES 6特性，比如0.12就可以使用generator，才导致寻求异步流程控制的tj写出了co这个著名的模块，继而诞生了Koa框架。但是在4.0之前，一直都是要通过flag才能开启generator支持，故而Koa 1.0迟迟未发布，在Node 4.0发布才发布的Koa 1.0。</p>\n<blockquote>\n<p>2015年，成熟的传统，而2016年，变革开始</p>\n</blockquote>\n<p>核心变更：es语法支持</p>\n<ul>\n<li>使用Node.js 4.x或5.x里的es6特性，如果想玩更高级的，可以使用<a href>babel</a>编译支持es7特性，或者typescript</li>\n<li>合理使用<a href=\"https://github.com/feross/standard\">standard</a>  或者 xo 代码风格约定</li>\n<li>适当的引入ES 6语法，只要Node.js SDK支持的，都可以使用</li>\n<li>需要大家重视OO（面向对象）写法的学习和使用，虽然ES 6的OO机制不健全，但这是大方向，以后会一直增强。OO对于大型软件开发更好。这其实也是我看好typescript的原因。</li>\n</ul>\n<p>对比一下变革前后的技术栈选型，希望读者能够从中感受到其中的变化</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>2015年</th>\n<th>2016年</th>\n<th>选型原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web框架</td>\n<td>express 4.x</td>\n<td>koa 1.0 &amp;&amp; 2.0 （koa2.0刚发布不久，喜欢折腾的可以考虑）</td>\n<td>主要在流程控制上的便利，异步毕竟要时刻注意，心累</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>mongoose（mongodb）</td>\n<td>mongoose（mongodb）</td>\n<td>对mongodb和mysql支持都一样，不过是mongodb更简单，足以应付绝大部分场景</td>\n</tr>\n<tr>\n<td>异步流程控制</td>\n<td>bluebird（Promise/A+实现）</td>\n<td>bluebird（Promise/A+实现）1） Koa 1.0 使用co + generator 2） Koa 2.0 使用async函数</td>\n<td>流程控制演进路线，从promise到async函数，无论如何，promise都是基石，必要掌握的</td>\n</tr>\n<tr>\n<td>模板引擎（视图层）</td>\n<td>ejs &amp;&amp; jade</td>\n<td>jade &amp;&amp; nunjucks</td>\n<td>给出了2种，一种可读性好，另一种简洁高效，都是非常好的</td>\n</tr>\n<tr>\n<td>测试</td>\n<td>mocha</td>\n<td>ava</td>\n<td>mocha是Node.js里著名的测试框架，但对新特性的支持没有ava那么好，而ava基于babel安装也要大上好多</td>\n</tr>\n<tr>\n<td>调试</td>\n<td>node-inspector</td>\n<td>VSCode</td>\n<td>在Node 6和7出来之后，node-inspector支持的不是那么好，相反VSCode可视化，简单，文件多时也不卡，特别好用</td>\n</tr>\n</tbody>\n</table>\n<h3>预处理器</h3>\n<p>前端预处理可分3种</p>\n<ul>\n<li>模板引擎</li>\n<li>css预处理器</li>\n<li>js友好语言</li>\n</ul>\n<p>这些都离不开Node.js的支持，对于前端工程师来说，使用Node.js来实现这些是最方便不过的。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>实现</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>模板引擎</td>\n<td>art\\mustache\\ejs\\hbs\\jade …</td>\n<td>上百种之多，自定义默认，编译成html，继而完成更多操作</td>\n</tr>\n<tr>\n<td>css预处理器</td>\n<td>less\\sass\\scss\\rework\\postcss</td>\n<td>自定义语法规则，编译成css</td>\n</tr>\n<tr>\n<td>js友好语言</td>\n<td>coffeescript、typescript</td>\n<td>自定义语法规则、编译成js</td>\n</tr>\n</tbody>\n</table>\n<h3>跨平台</h3>\n<p>跨平台指的是PC端、移动端、Web/H5</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>实现</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web/H5</td>\n<td>纯前端</td>\n<td>不必解释</td>\n</tr>\n<tr>\n<td>PC客户端</td>\n<td>nw.js和electron</td>\n<td>尤其是atom和vscode编辑器最为著名，像钉钉PC端，微信客户端、微信小程序IDE等都是这样的，通过web技术来打包成PC客户端</td>\n</tr>\n<tr>\n<td>移动端</td>\n<td>cordova（旧称PhoneGap），基于cordova的ionicframework</td>\n<td>这种采用h5开发，打包成ipa或apk的应用，称为Hybrid开发（混搭），通过webview实现所谓的跨平台，应用的还是非常广泛的</td>\n</tr>\n</tbody>\n</table>\n<h3>构建工具</h3>\n<p>说起构建工具，大概会想到make、ant、rake、gradle等，其实Node.js里有更多实现</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>介绍</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jake</td>\n<td>基于coffeescript的大概都熟悉这个，和make、rake类似</td>\n<td>经典传统</td>\n</tr>\n<tr>\n<td>grunt</td>\n<td>dsl风格的早期著名框架</td>\n<td>配置非常麻烦</td>\n</tr>\n<tr>\n<td>gulp</td>\n<td>流式构建，不会产生中间文件，利用Stream机制，处理大文件和内存有优势，配置简单，只有懂点js就能搞定</td>\n<td>grunt的替代品</td>\n</tr>\n<tr>\n<td>webpack + npm scripts</td>\n<td>说是构建工具有点过，但二者组合勉强算吧，loader和plugin机制还是非常强大的</td>\n<td>流行而已</td>\n</tr>\n</tbody>\n</table>\n<p>构建工具都不会特别复杂，所以Node.js世界里有非常多的实现，还有人写过node版本的make呢，玩的很嗨</p>\n<h3>HTTP Proxy</h3>\n<ul>\n<li>请求代理</li>\n<li>SSR &amp;&amp; PWA</li>\n<li>Api Proxy</li>\n</ul>\n<p>1）请求代理</p>\n<p>对于http请求复杂定制的时候，你是需要让Node.js来帮你的，比如为了兼容一个历史遗留需求，在访问某个CSS的时候必须提供HEADER才可以，如果放到静态server或cdn上是做不到的。</p>\n<p>2）SSR &amp;&amp; PWA</p>\n<p>SSR是服务器端渲染，PWA是渐进式Web应用，都是今年最火的技术。如果大家用过，一定对Node.js不陌生。比如React、Vuejs都是Node.js实现的ssr。至于pwa的service-worker也是Node.js实现的。那么为啥不用其他语言实现呢？不是其他语言不能实现，而是使用Node.js简单、方便、学习成本低，轻松获得高性能，如果用其他语言，我至少还得装环境</p>\n<p>3）Api Proxy</p>\n<p>产品需要应变，后端不好变，一变就要设计到数据库、存储等，可能引发事故。而在前端相对更容易，前端只负责组装服务，而非真正对数据库进行变动，所以只要服务api粒度合适，在前端来处理是更好的。</p>\n<p>Api的问题</p>\n<ul>\n<li>一个页面的Api非常多</li>\n<li>跨域，Api转发</li>\n<li>Api返回的数据对前端不友好，后端讨厌（应付）前端，几种api都懒得根据ui/ue去定制，能偷懒就偷懒</li>\n<li>需求决定Api，Api不一定给的及时</li>\n</ul>\n<p>所以，在前端渲染之余，加一层Api Proxy是非常必要的。淘宝早起曾公开过一张架构图，在今天看来，依然不过时</p>\n<p><img src=\"//dn-cnode.qbox.me/Fr8cGvus0i58atULAnoe-Cv4nu5m\" alt=\"taobao.jpg\"></p>\n<ul>\n<li>左侧半边，浏览器和Node.js Server通信可以有多种协议，HTML、RESTfull、BigPipe、Comet、Socket等，已经足够我们完成任何想做的事儿了</li>\n<li>右侧半边，是Node.js实现的WebServer，Node服务分了2个部分\n<ul>\n<li>常规的Http服务，即大块部分二</li>\n<li>ModelProxy指的是根据Server端的服务，组成并转化成自身的Model层。磨蹭用于为Http服务提供更好的接口</li>\n</ul>\n</li>\n</ul>\n<p>这里的Model Proxy其实就是我们所说的Api Proxy，这张图里只是说了结果，把聚合的服务转成模型，继而为HTTP服务提供Api。</p>\n<p>下面我们再深化一下Api Proxy的概念</p>\n<p><img src=\"//dn-cnode.qbox.me/FpAZo4aPQysJyciBvzUCU9uxb-vf\" alt=\"proxy.png\"></p>\n<p>这里的Node Proxy做了2件事儿，Api和渲染辅助。</p>\n<ul>\n<li>前端的异步ajax请求，可以直接访问Api</li>\n<li>如果是直接渲染或者bigpipe等协议的，需要在服务器端组装api，然后再返回给浏览器。</li>\n</ul>\n<p>所以Api后面还有一个服务组装，在微服务架构流行的今天，这种服务组装放到Node Proxy里的好处尤其明显。既可以提高前端开发效率，又可以让后端更加专注于服务开发。甚至如果前端团队足够大，可以在前端建一个Api小组，专门做服务集成的事儿。</p>\n<h3>Api服务</h3>\n<p>说完了Proxy，我们再看看利益问题。Node.js向后端延伸，必然会触动后端开发的利益。那么Proxy层的事儿，前后端矛盾的交界处，后端不想变，前端又求变，那么长此以往，Api接口会变得越来越恶心。后端是愿意把Api的事儿叫前端的，对后端来说，只要你不动我的数据库和服务就可以。</p>\n<p>但是Node.js能不能做这部分呢？答案是能的 ，这个是和Java、PHP类似的，一般是和数据库连接到一起，处理带有业务逻辑的。目前国内大部分都是以Java、PHP等为主，所以要想吃到这部分并不容易。</p>\n<ul>\n<li>小公司，创业公司，新孵化的项目更倾向于Node.js，简单，快速，高效</li>\n<li>微服务架构下的某些服务，使用Node.js开发，是比较合理的</li>\n</ul>\n<p>国内这部分一直没有做的很好，所以Node.js在大公司还没有很好的被应用，安全问题、生态问题、历史遗留问题等，还有很多人对Node.js的误解</p>\n<ul>\n<li>单线程很脆弱，这是事实，但单线程不等于不能多核并发，而且你还有集群呢</li>\n<li>运维，其实很简单，比其他语言之简单，日志采集、监控也非常简单</li>\n<li>模块稳定性，对于Mongodb、MySQL、Redis等还是相当不错，但其他的数据库支持可能没那么好。</li>\n<li>安全问题，</li>\n</ul>\n<p>这些对于提供Api服务来说已经足够了。</p>\n<h3>其他</h3>\n<table>\n<thead>\n<tr>\n<th>用途</th>\n<th>说明</th>\n<th>前景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>爬虫</td>\n<td>抢了不少Python的份额，整体来说简单，实用</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>命令行工具</td>\n<td>写工具、提高效率，node+npm真是无出其右</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微服务与RPC</td>\n<td>Node做纯后端不好做，但在新项目和微服务架构下，必有一席之地</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微信公众号开发</td>\n<td>已经火了2年多了，尤其是付费阅读领域，还会继续火下去，gitchat就是使用Node.js做的，而且还在招人</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>反向代理</td>\n<td>Node.js可以作为nginx这样的反向代理，虽然线上我们很少这样做，但它确确实实可以这样做。比如node-http-proxy和anyproxy等，其实使用Node.js做这种请求转发是非常简单的</td>\n<td>看涨</td>\n</tr>\n</tbody>\n</table>\n<h2>更好的写法</h2>\n<h3>Async函数与Promise</h3>\n<ul>\n<li>Async函数是趋势，Chrome 52. v8 5.1已经支持Async函数(<a href=\"https://github.com/nodejs/CTC/issues/7\">https://github.com/nodejs/CTC/issues/7</a>)了，Node.js 7.0+支持还会远么？</li>\n<li>Async和Generator函数里都支持promise，所以promise是必须会的。</li>\n<li>Generator和yield异常强大，不过不会成为主流，所以学会基本用法和promise就好了，没必要所有的都必须会。</li>\n<li>co作为Generator执行器是不错的，它更好的是当做Promise 包装器，通过Generator支持yieldable，最后返回Promise，是不是有点无耻？</li>\n</ul>\n<p>我整理了一张图，更直观一些。</p>\n<p><img src=\"//dn-cnode.qbox.me/FkcPwxdGHSCHFvA2nU0ub0zYNRt4\" alt=\"async-all.png\"></p>\n<ul>\n<li>红色代表Promise，是使用最多的，无论async还是generator都可用</li>\n<li>蓝色是Generator，过度货</li>\n<li>绿色是Async函数，趋势</li>\n</ul>\n<p><strong>结论</strong>：Promise是必须会的，那你为什么不顺势而为呢？</p>\n<p><strong>推荐</strong>：使用Async函数 + Promise组合，如下图所示。</p>\n<p><img src=\"//dn-cnode.qbox.me/FhVQF1FKB6sNkoFTc3gU-SVnkGtm\" alt=\"async-suggest.png\"></p>\n<p><strong>实践</strong></p>\n<p>合理的结合Promise和Async函数是可以非常高效的，但也要因场景而异</p>\n<ul>\n<li>Promise更容易做promisefyAll（比如使用bluebird）</li>\n<li>Async函数无法批量操作</li>\n</ul>\n<p>那么，在常见的Web应用里，我们总结的实践是，dao层使用Promise比较好，而service层，使用Async/Await更好。</p>\n<p>dao层使用Promise：</p>\n<ul>\n<li>crud</li>\n<li>单一模型的方法多</li>\n<li>库自身支持Promise</li>\n</ul>\n<p>这种用promisefyAll基本几行代码就够了，一般单一模型的操作，不会特别复杂，应变的需求基本不大。</p>\n<p>而service层一般是多个Model组合操作，多模型操作就可以拆分成多个小的操作，然后使用Await来组合，看起来会更加清晰，另外对需求应变也是非常容易的。</p>\n<h3>ES.next</h3>\n<blockquote>\n<p>Node.js + ES.next = ♥</p>\n</blockquote>\n<h3>Flow &amp;&amp; TypeScript</h3>\n<blockquote>\n<p>Type Systems Will Make You a Better JavaScript Developer</p>\n</blockquote>\n<h3>ES6模块</h3>\n<p>现在ES6自带了模块标准， 也是JS第一次支持module（之前的CommonJS、AMD、CMD都不算）， 但目前的所有Node.js版本都没有支持，目前只能用用Traceur、BabelJS， 或者TypeScript把ES6代码转化为兼容ES5版本的js代码，ES6模块新特性非常吸引人，下面简要说明。</p>\n<p>ES6 模块的目标是创建一个同时兼容CommonJS和AMD的格式，语法更加紧凑，通过编译时加载，使得编译时就能确定模块的依赖关系，效率要比 CommonJS 模块的加载方式高。而对于异步加载和配置模块加载方面，则借鉴AMD规范，其效率、灵活程度都远远好于CommonJS写法。</p>\n<ul>\n<li>语法更紧凑</li>\n<li>结构更适于静态编译（比如静态类型检查，优化等）</li>\n<li>对于循环引用支持更好</li>\n</ul>\n<p>ES6 模块标准只有2部分，它的用法更简单，你根本不需要关注实现细节:</p>\n<ul>\n<li>声明式语法：模块导入import、导出export，没有require了</li>\n<li>程式化加载API：可以配置模块是如何加载，以及按需加载。</li>\n</ul>\n<h3>多模块管理器：Lerna</h3>\n<blockquote>\n<p>A tool for managing JavaScript projects with multiple packages.</p>\n</blockquote>\n<p><a href=\"https://lernajs.io/\">https://lernajs.io/</a></p>\n<p>在设计框架的时候，经常做的事儿是进行模块拆分，继而提供插件或集成机制，这样是非常好的做法。但问题也随之而来，当你的模块模块非常多时，你该如何管理你的模块呢？</p>\n<ul>\n<li>法1：每个模块都建立独立的仓库</li>\n<li>法2：所有模块都放到1个仓库里</li>\n</ul>\n<p>法1虽然看起来干净，但模块多时，依赖安装，不同版本兼容等，会导致模块间依赖混乱，出现非常多的重复依赖，极其容易造成版本问题。这时法2就显得更加有效，对于测试，代码管理，发布等，都可以做到更好的支持。</p>\n<p>Lerna就是基于这种初衷而产生的专门用于管理Node.js多模块的工具，当然，前提是你有很多模块需要管理。</p>\n<p>你可以通过npm全局模块来安装Lerna，官方推荐直接使用Lerna 2.x版本</p>\n<h3>更好的NPM替代品：Yarn</h3>\n<p>Yarn是开源JavaScript包管理器，由于npm在扩展内部使用时遇到了大小、性能和安全等问题，Facebook携手来自Exponent、Google和Tilde的工程师，在大型JavaScript框架上打造和测试了Yarn，以便其尽可能适用于多人开发。Yarn承诺比各大流行npm包的安装更可靠，且速度更快。根据你所选的工作包的不同，Yarn可以将安装时间从数分钟减少至几秒钟。Yarn还兼容npm注册表，但包安装方法有所区别。其使用了lockfiles和一个决定性安装算法，能够为参与一个项目的所有用户维持相同的节点模块（node_modules）目录结构，有助于减少难以追踪的bug和在多台机器上复制。</p>\n<p>Yarn还致力于让安装更快速可靠，支持缓存下载的每一个包和并行操作，允许在没有互联网连接的情况下安装（如果此前有安装过的话）。此外，Yarn承诺同时兼容npm和Bower工作流，让你限制安装模块的授权许可。</p>\n<p>2016年10月份, Yarn在横空出世不到一周的时间里，github上的star数已经过万，可以看出大厂及社区的活跃度，以及解决问题的诚意，大概无出其右了！</p>\n<p>替换的原因</p>\n<ul>\n<li>在Facebook的大规模 npm 都工作的不太好</li>\n<li>npm拖慢了公司的ci工作流</li>\n<li>对一个检查所有的模块也是相当低效的</li>\n<li>npm被设计为是不确定性的，而Facebook工程师需要为他们的DevOps工作流提供一直和可依赖的系统</li>\n</ul>\n<p>与hack npm限制的做法相反，Facebook编写了Yarn</p>\n<ul>\n<li>Yarn 的本地缓存文件做的更好</li>\n<li>Yarn 可以并行它的一些操作，这加速了对新模块的安装处理</li>\n<li>Yarn 使用lockfiles，并用确定的算法来创建一个所有跨机器上都一样的文件</li>\n<li>出于安全考虑，在安装进程里，Yarn 不允许编写包的开发者去执行其他代码</li>\n</ul>\n<blockquote>\n<p>Yarn, which promises to even give developers that don’t work at Facebook’s scale a major performance boost, still uses the npm registry and is essentially a drop-in replacement for the npm client.</p>\n</blockquote>\n<p>很多人说和ruby的gem机制类似，都生成lockfile。确实是一个很不错的改进，在速度上有很大改进，配置cnpm等国内源来用，还是相当爽的。</p>\n<h3>友好语言</h3>\n<ul>\n<li>过气的Coffeescript，不多说</li>\n<li><a href=\"https://babeljs.io/\">Babel</a> - also an ES6 to ES5 transpiler that’s growing in popularity possibly because it also supports React’s JSX syntax. As of today it supports the most ES6 features at a somewhat respectable 73%.</li>\n<li><a href=\"http://www.typescriptlang.org/\">TypeScript</a> - a typed superset of JavaScript that not only compiles ES6 to ES5 (or even ES3) but also supports optional variable typing. TypeScript only supports 53% of ES6 features.</li>\n</ul>\n<h2>总结</h2>\n<blockquote>\n<p>坦诚的力量是无穷的</p>\n</blockquote>\n<p>Node.js是为异步而生的，它自己把复杂的事儿做了（高并发，低延时），交给用户的只是有点难用的Callback写法。也正是坦诚的将异步回调暴露出来，才有更好的流程控制方面的演进。也正是这些演进，让Node.js从DIRT（数据敏感实时应用）扩展到更多的应用场景，今天的Node.js已经不只是能写后端的JavaScript，已经涵盖了所有涉及到开发的各个方面，而Node全栈更是热门种的热门。</p>\n<p>直面问题才能有更好的解决方式，Node.js你值得拥有！</p>\n</div>",
            "title": "2017，我们来聊聊 Node.js",
            "last_reply_at": "2017-06-05T09:11:31.045Z",
            "good": true,
            "top": true,
            "reply_count": 80,
            "visit_count": 22375,
            "create_at": "2017-04-13T02:41:41.818Z",
            "author": {
                "loginname": "i5ting",
                "avatar_url": "https://avatars0.githubusercontent.com/u/3118295?v=3&s=120"
            }
        },
        {
            "id": "58ad76db7872ea0864fedfcc",
            "author_id": "51f0f267f4963ade0e08f503",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><img src=\"//dn-cnode.qbox.me/FlwW5i2h_UuKpnBXXvD3AqyrwjHP\" alt=\"untitled4.png\"></p>\n<h1>饿了么大前端 Node.js 进阶教程</h1>\n<p>因为 2016 年面试了很多做 Node.js 的同学，发现大部分做 Node 的同学都是前端转过来的，对后端的知识大多一片空白。所以很难招到比较好的 Node.js 服务端程序员（注意，不是全栈）。</p>\n<p>于是出于我们一贯的开源与分享精神，我们筹备了这个名字叫《如何通过饿了么 Node.js 面试》的开源的 Node.js 进阶教程。</p>\n<p>github 仓库地址：<a href=\"https://github.com/ElemeFE/node-interview\">https://github.com/ElemeFE/node-interview</a></p>\n<h3>导读</h3>\n<p>本教程包含 2~3 年经验的 Node.js 服务端需要知道的知识点。</p>\n<p>需要注意的是, 并不适用于零基础的同学, 你需要有一定的 JavaScript/Node.js 基础, 并且有一定的工作经验. 另外本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分.</p>\n<p>稳重将一些常见的问题划分归类, 每类标明涵盖的一些<code>覆盖点</code>, 并且列举几个<code>常见问题</code>, 通常这些问题都是 2~3 年工作经验需要了解或者面对的. 如果你对某类问题感兴趣, 或者想知道其中列举问题的答案, 可以通过该类下方的 <code>阅读更多</code> 查看更多的内容.</p>\n<p>整体上大纲列举的并不是很全面, 细节上覆盖率不高, 很多讨论只是点到即止, 希望大家带着问题去思考.</p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md\">Js 基础问题</a></h2>\n<blockquote>\n<p>与前端 Js 不同, 后端是直面服务器的, 更加偏向内存方面.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD\"><code>[Basic]</code> 类型判断</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><code>[Basic]</code> 作用域</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92\"><code>[Basic]</code> 引用传递</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE\"><code>[Basic]</code> 内存释放</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#es6-%E6%96%B0%E7%89%B9%E6%80%A7\"><code>[Basic]</code> ES6 新特性</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-value\">[more]</a></li>\n<li>js 中， 0.1 + 0.2 === 0.3 是否为 true ? 在不知道浮点数位数时应该怎样判断两个浮点数之和与第三数是否相等？</li>\n<li>const 定义的 Array 中间元素能否被修改? 如果可以, 那 const 的意义是? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-const\">[more]</a></li>\n<li>JavaScript 中不同类型以及不同环境下变量的内存都是何时释放? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-mem\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md\">模块</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6\"><code>[Basic]</code> 模块机制</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E7%83%AD%E6%9B%B4%E6%96%B0\"><code>[Basic]</code> 热更新</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E4%B8%8A%E4%B8%8B%E6%96%87\"><code>[Basic]</code> 上下文</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>a.js 和 b.js 两个文件互相 require 是否会死循环? 双方是否能导出变量? 如何从设计上避免这种问题? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-loop\">[more]</a></li>\n<li>如果 a.js require 了 b.js, 那么在 b 中定义全局变量 <code>t = 111</code> 能否在 a 中直接打印出来? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-global\">[more]</a></li>\n<li>如何在不重启 node 进程的情况下热更新一个 js/json 文件? 这个问题本身是否有问题? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-hot\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md\">事件/异步</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#promise\"><code>[Basic]</code> Promise</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#events\"><code>[Doc]</code> Events (事件)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#timers\"><code>[Doc]</code> Timers (定时器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#%E9%98%BB%E5%A1%9E%E5%BC%82%E6%AD%A5\"><code>[Point]</code> 阻塞/异步</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#%E5%B9%B6%E8%A1%8C%E5%B9%B6%E5%8F%91\"><code>[Point]</code> 并行/并发</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Promise 中 .then 的第二参数与 .catch 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-1\">[more]</a></li>\n<li>Eventemitter 的 emit 是同步还是异步? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-2\">[more]</a></li>\n<li>如何判断接口是否异步? 是否只要有回调函数就是异步? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-3\">[more]</a></li>\n<li>nextTick, setTimeout 以及 setImmediate 三者有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-4\">[more]</a></li>\n<li>如何实现一个 sleep 函数? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-5\">[more]</a></li>\n<li>如何实现一个异步的 reduce? (注:不是异步完了之后同步 reduce) <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-6\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md\">进程</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#process\"><code>[Doc]</code> Process (进程)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#child-process\"><code>[Doc]</code> Child Processes (子进程)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#cluster\"><code>[Doc]</code> Cluster (集群)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"><code>[Basic]</code> 进程间通信</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B\"><code>[Basic]</code> 守护进程</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>进程的当前工作目录是什么? 有什么作用? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-cwd\">[more]</a></li>\n<li>child_process.fork 与 POSIX 的 fork 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-fork\">[more]</a></li>\n<li>父进程或子进程的死亡是否会影响对方? 什么是孤儿进程? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-child\">[more]</a></li>\n<li>cluster 是如何保证负载均衡的? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#how-it-works\">[more]</a></li>\n<li>什么是守护进程? 如何实现守护进程? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md\">IO</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#buffer\"><code>[Doc]</code> Buffer</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#string-decoder\"><code>[Doc]</code> String Decoder (字符串解码)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#stream\"><code>[Doc]</code> Stream (流)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#console\"><code>[Doc]</code> Console (控制台)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#file\"><code>[Doc]</code> File System (文件系统)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#readline\"><code>[Doc]</code> Readline</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#repl\"><code>[Doc]</code> REPL</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Buffer 一般用于处理什么数据? 其长度能否动态变化? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#buffer\">[more]</a></li>\n<li>Stream 的 highWaterMark 与 drain 事件是什么? 二者之间的关系是? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#%E7%BC%93%E5%86%B2%E5%8C%BA\">[more]</a></li>\n<li>Stream 的 pipe 的作用是? 在 pipe 的过程中数据是引用传递还是拷贝传递? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#pipe\">[more]</a></li>\n<li>什么是文件描述符? 输入流/输出流/错误流是什么? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#file\">[more]</a></li>\n<li>console.log 是同步还是异步? 如何实现一个 console.log? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#console\">[more]</a></li>\n<li>如何同步的获取用户的输入?  <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5%E7%9A%84%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E8%BE%93%E5%85%A5\">[more]</a></li>\n<li>Readline 是如何实现的? (有思路即可) <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#readline\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md\">Network</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#net\"><code>[Doc]</code> Net (网络)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#udp\"><code>[Doc]</code> UDP/Datagram</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#http\"><code>[Doc]</code> HTTP</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#dns\"><code>[Doc]</code> DNS (域名服务器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#zlib\"><code>[Doc]</code> ZLIB (压缩)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#rpc\"><code>[Point]</code> RPC</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>cookie 与 session 的区别? 服务端如何清除 cookie? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-cookie-session\">[more]</a></li>\n<li>HTTP 协议中的 POST 和 PUT 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-post-put\">[more]</a></li>\n<li>什么是跨域请求? 如何允许跨域? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-cors\">[more]</a></li>\n<li>TCP/UDP 的区别? TCP 粘包是怎么回事，如何处理? UDP 有粘包吗? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-tcp-udp\">[more]</a></li>\n<li><code>TIME_WAIT</code> 是什么情况? 出现过多的 <code>TIME_WAIT</code> 可能是什么原因? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-time-wait\">[more]</a></li>\n<li>ECONNRESET 是什么错误? 如何复现这个错误?</li>\n<li>socket hang up 是什么意思? 可能在什么情况下出现? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#socket-hang-up\">[more]</a></li>\n<li>hosts 文件是什么? 什么叫 DNS 本地解析?</li>\n<li>列举几个提高网络传输速度的办法?</li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md\">OS</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#tty\"><code>[Doc]</code> TTY</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#os\"><code>[Doc]</code> OS (操作系统)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#path\"><code>[Doc]</code> Path</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0\"><code>[Doc]</code> 命令行参数</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E8%B4%9F%E8%BD%BD\"><code>[Basic]</code> 负载</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#checklist\"><code>[Point]</code> CheckList</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>什么是 TTY? 如何判断是否处于 TTY 环境? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#tty\">[more]</a></li>\n<li>不同操作系统的换行符 (EOL) 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#os\">[more]</a></li>\n<li>服务器负载是什么概念? 如何查看负载? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E8%B4%9F%E8%BD%BD\">[more]</a></li>\n<li>ulimit 是用来干什么的? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#ulimit\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md\">错误处理/调试/优化</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#errors\"><code>[Doc]</code> Errors (异常)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#domain\"><code>[Doc]</code> Domain (域)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#debugger\"><code>[Doc]</code> Debugger (调试器)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#c-c++-addon\"><code>[Doc]</code> C/C++ 插件</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#v8\"><code>[Doc]</code> V8</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7\"><code>[Point]</code> 内存快照</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#cpu-profiling\"><code>[Point]</code> CPU profiling</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>怎么处理未预料的出错? 用 try/catch ，domains 还是其它什么? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#q-handle-error\">[more]</a></li>\n<li>什么是 <code>uncaughtException</code> 事件? 一般在什么情况下使用该事件? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#uncaughtexception\">[more]</a></li>\n<li>domain 的原理是? 为什么要弃用 domain? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#domain\">[more]</a></li>\n<li>什么是防御性编程? 与其相对的 let it crash 又是什么?</li>\n<li>为什么要在 cb 的第一参数传 error? 为什么有的 cb 第一个参数不是 error, 例如 http.createServer?</li>\n<li>为什么有些异常没法根据报错信息定位到代码调用? 如何准确的定位一个异常? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E9%94%99%E8%AF%AF%E6%A0%88%E4%B8%A2%E5%A4%B1\">[more]</a></li>\n<li>内存泄漏通常由哪些原因导致? 如何分析以及定位内存泄漏? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md\">测试</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95\"><code>[Basic]</code> 测试方法</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 单元测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 集成测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 基准测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95\"><code>[Basic]</code> 压力测试</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#assert\"><code>[Doc]</code> Assert (断言)</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>为什么要写测试? 写测试是否会拖累开发进度?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#q-why-write-test\">[more]</a></li>\n<li>单元测试的单元是指什么? 什么是覆盖率?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\">[more]</a></li>\n<li>测试是如何保证业务逻辑中不会出现死循环的?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#q-death-loop\">[more]</a></li>\n<li>mock 是什么? 一般在什么情况下 mock?<a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#mock\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md\">util</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#url\"><code>[Doc]</code> URL</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#query-strings\"><code>[Doc]</code> Query Strings (查询字符串)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#util-1\"><code>[Doc]</code> Utilities (实用函数)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><code>[Basic]</code> 正则表达式</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>HTTP 如何通过 GET 方法 (URL) 传递 let arr = [1,2,3,4] 给服务器? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#get-param\">[more]</a></li>\n<li>Node.js 中继承 (util.inherits) 的实现? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#utilinherits\">[more]</a></li>\n<li>如何递归获取某个文件夹下所有的文件名? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#q-traversal\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md\">存储</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#mysql\"><code>[Point]</code> Mysql</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#mongodb\"><code>[Point]</code> Mongodb</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#replication\"><code>[Point]</code> Replication</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7\"><code>[Point]</code> 数据一致性</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%BC%93%E5%AD%98\"><code>[Point]</code> 缓存</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>备份数据库与 M/S, M/M 等部署方式的区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#replication\">[more]</a></li>\n<li>索引有什么用，大致原理是什么? 设计索引有什么注意点? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%B4%A2%E5%BC%95\">[more]</a></li>\n<li>Monogdb 连接问题(超时/断开等)有可能是什么问题导致的? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#Mongodb\">[more]</a></li>\n<li>什么情况下数据会出现脏数据? 如何避免? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7\">[more]</a></li>\n<li>redis 与 memcached 的区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%BC%93%E5%AD%98\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md\">阅读更多</a></p>\n<h2><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md\">安全</a></h2>\n<ul>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#crypto\"><code>[Doc]</code> Crypto (加密)</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#tlsssl\"><code>[Doc]</code> TLS/SSL</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#https\"><code>[Doc]</code> HTTPS</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss\"><code>[Point]</code> XSS</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#csrf\"><code>[Point]</code> CSRF</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB\"><code>[Point]</code> 中间人攻击</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#sqlnosql-%E6%B3%A8%E5%85%A5\"><code>[Point]</code> Sql/Nosql 注入</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>加密是如何保证用户密码的安全性? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#crypto\">[more]</a></li>\n<li>TLS 与 SSL 有什么区别? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#tlsssl\">[more]</a></li>\n<li>HTTPS 能否被劫持? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#https\">[more]</a></li>\n<li>XSS 攻击是什么? 有什么危害? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss\">[more]</a></li>\n<li>过滤 Html 标签能否防止 XSS? 请列举不能的情况? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss\">[more]</a></li>\n<li>CSRF 是什么? 如何防范? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#csrf\">[more]</a></li>\n<li>如何避免中间人攻击? <a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB\">[more]</a></li>\n</ul>\n<p><a href=\"https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md\">阅读更多</a></p>\n<h2>最后</h2>\n<p>目前 repo 处于施工现场的情况，如果发现问题欢迎在 <a href=\"https://github.com/ElemeFE/node-interview/issues\">issues</a> 中指出。如果有比较好的<code>问题/知识点/指正</code>，也欢迎提 PR。</p>\n<p>另外关于 <code>Js 基础</code> 是个比较大的话题，在本教程不会很细致深入的讨论，更多的是列出一些重要或者更服务端更相关的地方，所以如果你拿着《JavaScript 权威指南》给教程提 PR 可能不会采纳。本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分。</p>\n</div>",
            "title": "饿了么大前端 Node.js 进阶教程",
            "last_reply_at": "2017-06-05T07:50:45.119Z",
            "good": true,
            "top": true,
            "reply_count": 150,
            "visit_count": 53982,
            "create_at": "2017-02-22T11:32:43.547Z",
            "author": {
                "loginname": "lellansin",
                "avatar_url": "https://avatars1.githubusercontent.com/u/2081487?v=3&s=120"
            }
        },
        {
            "id": "58d0fb3517f61387400b7e15",
            "author_id": "4f447c2f0a8abae26e01b27d",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/1ac00bee5abd7cc1d9a9435f861acba6.png\" alt=\"screenshot.png\"></p>\n<blockquote>\n<p>原文地址：<a href=\"https://zhuanlan.zhihu.com/p/25860846\">https://zhuanlan.zhihu.com/p/25860846</a></p>\n</blockquote>\n<hr>\n<p>时光如梭，转眼间 Egg.js 已经开源半年了，我们很荣幸地宣布，Egg.js 正式发布 1.0 版本。</p>\n<ul>\n<li>官网传送门：<a href=\"https://eggjs.org\">https://eggjs.org</a></li>\n<li>GitHub：<a href=\"https://github.com/eggjs/egg\">https://github.com/eggjs/egg</a></li>\n<li>Egg.js 英文文档：与 SwiftGG 翻译组强强联合，中译英的小伙伴招募中，如果你有兴趣，请试译 这篇文章 ，并注明你的 qq 号，发送给 SwiftGG 的同学邮箱(<a href=\"mailto:1030041592@qq.com\">1030041592@qq.com</a>)。期待你的加入！</li>\n</ul>\n<h2>特点</h2>\n<ul>\n<li><strong>『企业级的 Node.js Web 基础框架』</strong>，寓意 - 孕育新生。</li>\n<li>业界领先的 <strong>『微内核 + 插件机制』</strong>，专为团队架构师量身打造的 <strong>『框架定制』</strong> 能力。</li>\n<li>内建的安全机制与多进程管理模型。</li>\n<li>高可用，高质量，严格遵循 Semver 规则，测试覆盖率 100%（travis/appveyor)。</li>\n<li>同时支持 koa 1.x 和 2.x 生态，支持 ES 2017 Async Await。</li>\n<li>沉淀自阿里各行各业不同领域最佳实践的插件，涵盖了常见的业务开发场景，稳定支撑了 15 和 16 年天猫双11大促，顶级流量压力。</li>\n<li>渐进式，极具伸缩性，既适合个人小项目快速开发，也适合企业级的团队开发协作。</li>\n</ul>\n<blockquote>\n<p>更详细的特点，以及 Node.js 在阿里的定位，可以参见： <a href=\"https://www.zhihu.com/question/50526101/answer/144952130\">如何评价阿里开源的企业级 Node.js 框架 egg？</a></p>\n</blockquote>\n<h2>里程碑</h2>\n<ul>\n<li>2013 年蚂蚁的 chair 框架，可视为 Egg.js 前身。</li>\n<li>2015 年 11 月，在苏千的召集下，阿里各 BU 的前端骨干齐聚黄龙，闭门共建一周。</li>\n<li>2016 年初，各 BU 的基础 Web 框架完成升级，在同一套规范的基础上进行差异化定制。</li>\n<li>2016 年中，成为阿里 Node.js 基建，广泛使用在绝大部分阿里的前端 Node.js 应用。</li>\n<li>2016 年 09 月，在 <a href=\"http://2016.jsconf.cn/\">JSConf China 2016</a> 上亮相并宣布开源。</li>\n<li>2017 年初，经过一周的<a href=\"https://cnodejs.org/topic/5870e9da04dcf9a706a745f0\">闭关直播写文档</a>，期待已久的 <a href=\"https://eggjs.org/\">官方文档</a> 诚意登场，足足近 30 篇。</li>\n<li>2017年 02 月，知乎问答：<a href=\"https://www.zhihu.com/question/50526101/answer/144952130\">如何评价阿里开源的企业级 Node.js 框架 egg？</a></li>\n<li>2017 年 02 月第 2 周，上了 <strong>GitHub Trending</strong> 周榜第三，Star 数增加 1k 多。</li>\n<li>2017 年 03 月 21 日，Egg.js 正式发布 1.0.0 。</li>\n</ul>\n<h2>成就</h2>\n<ul>\n<li>截止到今天，2250+ Star，50+ 插件，10+ 核心开发者，30+ 贡献者。</li>\n<li>GitHub Trending 周榜第三，并上了 Node Weekly 周刊。</li>\n<li>官网 UV 日均 300+ 。</li>\n</ul>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/2a69766ae55cab517418e7b2f004d9b9.png\" alt=\"screenshot.png\"></p>\n<ul>\n<li>Node TSC Director - Rod Vagg 在 Twitter 上关注并转发。</li>\n</ul>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/42f3483f8c7b9a39678958816f477ae2.png\" alt=\"screenshot.png\"></p>\n<h2>感言</h2>\n<p><img src=\"http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6461618ea8944a1fb5ada1db8aeb7de7.png\" alt=\"screenshot.png\"></p>\n<h2>规划</h2>\n<ul>\n<li>Egg.js 英文文档翻译，欢迎加入 <a href=\"http://swift.gg/\">SwiftGG 翻译组</a> 发起的 <a href=\"https://github.com/eggjs/egg/issues/363\">Egg 文档翻译项目</a>。</li>\n<li>继续完善文档，沉淀最佳实践，并帮助社区产出更多的插件和上层框架。</li>\n<li>Node.js 8 LTS 发布后，底层将无缝升级到 Koa<a href=\"/user/2\">@2</a> 。</li>\n</ul>\n</div>",
            "title": "Egg.js 1.0.0 正式发布 - 企业级 Node.js 框架",
            "last_reply_at": "2017-05-31T07:53:35.356Z",
            "good": false,
            "top": true,
            "reply_count": 144,
            "visit_count": 30040,
            "create_at": "2017-03-21T10:06:45.487Z",
            "author": {
                "loginname": "atian25",
                "avatar_url": "https://avatars.githubusercontent.com/u/227713?v=3&s=120"
            }
        },
        {
            "id": "5933eed75b07c1b24afa0656",
            "author_id": "5811696acf18d0333412d208",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>在开发 H5 应用的时候碰到一个问题，\n应用只需要一张小的缩略图，\n而用户用手机上传的确是一张大图，\n手机摄像机拍的图片好几 M，这可要浪费很多流量。</p>\n<p>像我这么为用户着想的程序员，绝对不会让这种事情发生的，\n于是就有了本文。</p>\n<h1>获取图片</h1>\n<p>通过 <a href=\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\">File API</a> 获取图片。</p>\n<pre class=\"prettyprint language-javascript\"><code>var input = document.createElement(&#x27;input&#x27;);\ninput.type = &#x27;file&#x27;;\ninput.addEventListener(&#x27;change&#x27;, function() {\n  var file = this.files[0];\n});\ninput.click();\n</code></pre><h1>预览图片</h1>\n<p>使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\"><code>createObjectURL()</code></a> 或者 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a> 预览图片</p>\n<pre class=\"prettyprint language-javascript\"><code>var img = document.createElement(&#x27;img&#x27;);\nimg.src = window.URL.createObjectURL(file);\n</code></pre><pre class=\"prettyprint language-javascript\"><code>var img = document.createElement(&quot;img&quot;);\nvar reader = new FileReader();\nreader.onload = function(e) {\n  img.src = e.target.result;\n}\nreader.readAsDataURL(file);\n</code></pre><h1>使用 canvas 做缩略图</h1>\n<pre class=\"prettyprint language-javascript\"><code>var canvas = document.createElement(&quot;canvas&quot;);\nvar ctx = canvas.getContext(&quot;2d&quot;);\nvar MAX_WIDTH = 800;\nvar MAX_HEIGHT = 600;\nvar width = img.width;\nvar height = img.height;\n \nif (width &gt; height) {\n  if (width &gt; MAX_WIDTH) {\n    height *= MAX_WIDTH &#x2F; width;\n    width = MAX_WIDTH;\n  }\n} else {\n  if (height &gt; MAX_HEIGHT) {\n    width *= MAX_HEIGHT &#x2F; height;\n    height = MAX_HEIGHT;\n  }\n}\ncanvas.width = width;\ncanvas.height = height;\nctx.drawImage(img, 0, 0, width, height);\n</code></pre><h1>上传缩略图</h1>\n<pre class=\"prettyprint language-javascript\"><code>canvas.toBlob(function(blob) {\n  var form = new FormData();\n  form.append(&#x27;file&#x27;, blob);\n  fetch(&#x27;&#x2F;api&#x2F;upload&#x27;, {method: &#x27;POST&#x27;, body: form});\n});\n</code></pre><h1>结语</h1>\n<p>DEMO：<a href=\"http://weekcool.com/js/upload.js\">http://weekcool.com/js/upload.js</a></p>\n<p>需要帮助留言或加微信: <code>Fisher_like</code></p>\n<p>如果觉得文章好，对你有启发就来关注我吧。\n原文详见: <a href=\"http://www.jianshu.com/p/823ceea1506c\">http://www.jianshu.com/p/823ceea1506c</a></p>\n</div>",
            "title": "HTML5 之图片上传预处理",
            "last_reply_at": "2017-06-05T13:06:36.537Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 178,
            "create_at": "2017-06-04T11:28:23.562Z",
            "author": {
                "loginname": "Lupino",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1642957?v=3&s=120"
            }
        },
        {
            "id": "5933da7c7e057cea7ceb98ad",
            "author_id": "5933cd9e7e057cea7ceb98ab",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>我已经在segmentfault上提问过了，没有大神回答。 <a href=\"https://segmentfault.com/q/1010000009651130\">vue服务端渲染如何部署到线上</a>。也没有google到解决的方案，自己也研究了几天，实在是能力有限。我知道非服务端渲染的vue项目打包后dist目录有一个html文件，部署简单。但是官方的hackernews案例打包后是js文件，就不知道如何部署了，我还在github上提了 <a href=\"https://github.com/vuejs/vue-hackernews-2.0/issues/200\">issue</a>,如果有朋友有解决方案，望不吝赐教，先谢谢各位了。官方打包后的dist目录文 件<img src=\"//dn-cnode.qbox.me/Fhzw6Fr1HHHTQEe17-cB4Q0YZsoy\" alt=\"2017-06-04_163828.png\"></p>\n</div>",
            "title": "求助如何在node服务器上部署vue ssr",
            "last_reply_at": "2017-06-05T13:06:24.627Z",
            "good": false,
            "top": false,
            "reply_count": 7,
            "visit_count": 153,
            "create_at": "2017-06-04T10:01:32.507Z",
            "author": {
                "loginname": "wmui",
                "avatar_url": "https://avatars3.githubusercontent.com/u/24876474?v=3&s=120"
            }
        },
        {
            "id": "58cbf468ef3f9df178e0e2de",
            "author_id": "53d391a0895ba3062b7ee7f5",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1>What’s wrong with Promise?</h1>\n<p>Promsie 刚出来的时候欣喜若狂，终于可以摆脱万恶的回调嵌套了。但最近项目中越来越觉得Promise不合场景，当业务逻辑复杂，分支情况变多时代码结构越来越难看。Promise  点then .then的方式注定会依次往下执行, 一同事为了直接返回，使用Promise.reject()强行跳转，感觉又看到了goto的影子.(go die …).</p>\n<p>然后决定试用一波co模块(tj 的<a href=\"https://github.com/tj/co\">co</a> ,bluebird 的<a href=\"http://bluebirdjs.com/docs/api/promise.coroutine.html\">coroutine</a>,还有 <a href=\"https://github.com/cujojs/when/blob/master/docs/api.md#generatorcall\">when/generator</a>这三个模块有一个共同的特点，yield之后的语句需要返回一个Promise.  Promise 是为了解决回调操作带来的麻烦的，coroutine从某种意义上讲也是为了解决回调带来的代码可读性问题，那为何还要依赖于Promise呢，TJ在<code>co</code>这个项目里的回答是Promise变得越来越流行，并且官方化了，所以<code>co</code>也加入了这个潮流。私以为还是得从原本的目的出发，几行代码能解决的问题，没必要套个Promise.</p>\n<p>基于以上考虑开发了<a href=\"https://github.com/yyrdl/zco\">zco</a> 这个模块，除了能和callback无缝使用和必须的feature,还引入了golang里面的defer功能，从获取函数返回值得形式上看也很像golang（这个无心插柳。。）。下面贴出了性能测试，也附上了做同样的事各个coroutine版本的差异。</p>\n<h1>benchmark</h1>\n<p>几种书写异步代码方式的性能测试结果，其中co 前缀的是指coroutine版本。\n对于coroutine的版本 ,比较了zco ，ES7 async/await ,tj’s co, bluebird coroutine, when/generator 五种，其中zco是表现最好的。我也有点意外，为什么es7 的async/await 性能一般。测试代码见 <a href=\"https://github.com/yyrdl/zco\">https://github.com/yyrdl/zco</a> .</p>\n<pre class=\"prettyprint language-javascript\"><code>name                                                      timecost(ms)     memery(mb)       \ncallback.js                                               116              30.30078125      \nasync-neo@1.8.2.js                                        187              48.52734375\npromise_bluebird@2.11.0.js                                713              93.58984375      \nco_zco_yyrdl@1.2.0.js                                     800              76.375           \nasync_caolan@1.5.2.js                                     1100             122.515625       \nco_when_generator_cujojs@3.7.8.js                         1159             118.69921875     \nco_when_generator_cujojs_with_bluebird@3.7.8.js           1359             136.29296875     \nco_tj_with_bluebird_promise@4.6.0.js                      1386             125.58203125     \npromise_native.js                                         1451             171.72265625     \nasync_await_es7_with_native_promise.js                    1526             170.234375       \nco_when_generator_cujojs_with_native_promise@3.7.8.js     1720             165.0703125      \nco_tj_with_native_promise@4.6.0.js                        1753             162.3203125      \nasync_await_es7_with_bluebird_promise.js                  1891             197.7109375      \nco_coroutine_bluebird@2.11.0.js                           4446             244.984375       \n\nPlatform info:\nWindows_NT 10.0.14393 x64\nNode.JS 7.7.3\nV8 5.5.372.41\nIntel(R) Core(TM) i5-3210M CPU @ 2.50GHz × 4\n\n</code></pre><h1><a href=\"https://github.com/yyrdl/zco\">zco</a></h1>\n<p>灵感来自于tj的<a href=\"https://github.com/tj/co\">co</a>，创新之处在于不需要Promise了，该模块允许你书写同步代码直接调用异步方法。以返回某一个文件夹下的js 文件列表为例,依次比较zco 版，tj co版,Promise版，纯回调版,es7 async wait五种写法：</p>\n<h3>zco 版</h3>\n<pre class=\"prettyprint language-js\"><code>const zco=require(&quot;zco&quot;);\nconst fs=require(&quot;fs&quot;);\nconst testDirectory=&quot;.&#x2F;cases&quot;;\n\nlet getAllJsFileZCOVersion=function(dirname){\n   return zco(function*(next){\n       let files=[];\n       let [err,list]=yield fs.readdir(dirname,next);&#x2F;&#x2F;获得目录下的文件列表\n        if(err){\n           throw err;\n        }\n       for(var i=0;i&lt;list.length;i++){\n           let [er,stat]=yield fs.stat(dirname+&quot;&#x2F;&quot;+list[i],next);&#x2F;&#x2F;获得文件的信息\n\t \t if(er){\n\t\t   throw er;\n\t\t }\n           if(stat.isFile()&amp;&amp;list[i].endsWith(&quot;.js&quot;)){&#x2F;&#x2F;判断是不是js文件\n               files.push(list[i]);\n           }\n       }\n       return files;\n   });\n}\n\n&#x2F;&#x2F;then use it\nzco(function*(next){\n  var [err,jsFiles]=yield getAllJsFileZCOVersion(testDirectory)(next);\n  if(err){\n      console.log(err.message);\n  }else{\n      console.log(jsFiles);\n  }\n})();\n\n&#x2F;&#x2F;或者这样用\ngetAllJsFileZCOVersion(testDirectory)((err,jsFiles)=&gt;{\n   if(err){\n      console.log(err.message);\n   }else{\n       console.log(jsFiles);\n   }\n})\n</code></pre><h3>tj co 版</h3>\n<pre class=\"prettyprint language-js\"><code>\nconst co=require(&quot;co&quot;);\nconst Promise=require(&quot;bluebird&quot;);\nconst fs=require(&quot;fs&quot;);\n\nconst testDirectory=&quot;.&#x2F;cases&quot;;\n&#x2F;&#x2F;需要将原本的回调操作包装成promise的版本\nlet readdir=function(dirname){\n    return new Promise((resolve,reject)=&gt;{\n        fs.readdir(dirname,(err,list)=&gt;{\n           if(err){\n               reject(err);\n           }else{\n               resolve(list);\n           }\n        })\n    })\n}\nlet stat=function(file){\n    return new Promise((resolve,reject)=&gt;{\n        fs.stat(file,(err,stats)=&gt;{\n            if(err){\n                reject(err);\n            }else{\n                resolve(stats);\n            }\n        })\n    });\n}\nlet getAllJsFileTJCOVersion=function(dirname){\n    return co(function*(){\n        let list=yield readdir(dirname);\n        let files=[];\n        for(let i=0;i&lt;list.length;i++){\n            let stats=yield stat(dirname+&quot;&#x2F;&quot;+list[i]);\n            if(stats.isFile()&amp;&amp;list[i].endsWith(&quot;.js&quot;)){\n                files.push(list[i]);\n            }\n        }\n        return files;\n    });\n}\n\n&#x2F;&#x2F;then use it\n\ngetAllJsFileTJCOVersion(testDirectory).then((files)=&gt;{\n    console.log(files);\n}).catch((err)=&gt;{\n    console.log(err);\n})\n\n</code></pre><h3>Promise 版</h3>\n<pre class=\"prettyprint language-js\"><code>const Promise=require(&quot;bluebird&quot;);\nconst fs=require(&quot;fs&quot;);\nconst testDirectory=&quot;.&#x2F;cases&quot;;\n\n\nlet readdir=function(dirname){\n    return new Promise((resolve,reject)=&gt;{\n        fs.readdir(dirname,(err,list)=&gt;{\n           if(err){\n               reject(err);\n           }else{\n               resolve(list);\n           }\n        })\n    })\n}\nlet stat=function(file){\n    return new Promise((resolve,reject)=&gt;{\n        fs.stat(file,(err,stats)=&gt;{\n            if(err){\n                reject(err);\n            }else{\n                resolve(stats);\n            }\n        })\n    });\n}\nlet getAllJsFilePurePromiseVersion=function (dirname) {\n    return readdir(dirname).then((list)=&gt;{\n        let pros=[];\n        for(let i=0;i&lt;list.length;i++){\n            pros.push(stat(dirname+&quot;&#x2F;&quot;+list[i]));\n        }\n        return Promise.all(pros).then((statsList)=&gt;{\n            let files=[];\n            for(let i=0;i&lt;statsList.length;i++){\n                if(statsList[i].isFile()&amp;&amp;list[i].endsWith(&quot;.js&quot;)){\n                    files.push(list[i]);\n                }\n            }\n            return files;\n        });\n    });\n}\n&#x2F;&#x2F;then use it\n\ngetAllJsFilePurePromiseVersion(testDirectory).then((files)=&gt;{\n    console.log(files);\n}).catch((err)=&gt;{\n    console.log(err);\n})\n</code></pre><h3>纯回调版</h3>\n<p>回调是Node.js 里面最原始的用法，也是性能最好的用法</p>\n<pre class=\"prettyprint language-js\"><code>\nlet getAllJsFilePureCallbackVersion=function(dirname,callback){\n    let index=0,list=[],files=[];\n    let alreadyReturn=false;\n    let _end=function (err) {\n        if(!alreadyReturn){\n            alreadyReturn=true;\n            err?callback(err):callback(undefined,files);\n        }\n    }\n    let checkDone=function () {\n        if(index===list.length){\n            _end();\n        }\n    }\n    let jsFile=function () {\n        for(let i=0;i&lt;list.length;i++){\n            ((j)=&gt;{\n                fs.stat(dirname+&quot;&#x2F;&quot;+list[j],(err,stats)=&gt;{\n\t\t\t\t   if(err){\n\t\t\t\t     _end(err)\n\t\t\t\t   }else if(stats.isFile()&amp;&amp;list[j].endsWith(&quot;.js&quot;)){\n                        files.push(list[j]);\n                        index++;\n                        checkDone();\n                    }\n                })\n            })(i)\n        }\n    }\n    fs.readdir(dirname,(err,_list)=&gt;{\n        if(err){\n           _end(err);\n        }else{\n           list=_list;\n            jsFile();\n        }\n    });\n}\n\n&#x2F;&#x2F;then use it\n\ngetAllJsFilePureCallbackVersion(testDirectory,(err,files)=&gt;{\n    if(err){\n        console.log(err);\n    }else{\n        console.log(files);\n    }\n})\n</code></pre><h3>es7 async await 版本</h3>\n<pre class=\"prettyprint language-javascript\"><code>const fs=require(&quot;fs&quot;);\nconst testDirectory=&quot;.&#x2F;cases&quot;;\n&#x2F;&#x2F;async await 需要和Promise一起用，需要将原本的回调包装成Promise\nlet readdir=function(dirname){\n    return new Promise((resolve,reject)=&gt;{\n        fs.readdir(dirname,(err,list)=&gt;{\n           if(err){\n               reject(err);\n           }else{\n               resolve(list);\n           }\n        })\n    })\n}\nlet stat=function(file){\n    return new Promise((resolve,reject)=&gt;{\n        fs.stat(file,(err,stats)=&gt;{\n            if(err){\n                reject(err);\n            }else{\n                resolve(stats);\n            }\n        })\n    });\n}\nlet getAllJsFileAsyncAwaitES7Version=async function (dirname) {\n       let list=await  readdir(dirname);\n       let files=[];\n       for(let i=0;i&lt;list.length;i++){\n           let stats=await stat(dirname+&quot;&#x2F;&quot;+list[i]);\n           if(stats.isFile()&amp;&amp;list[i].endsWith(&quot;.js&quot;)){\n               files.push(list[i]);\n           }\n       }\n       return files;\n}\n\n getAllJsFileAsyncAwaitES7Version(testDirectory).then((files)=&gt;{\n     console.log(files);\n }).catch((err)=&gt;{\n     console.log(err);\n })\n</code></pre><p>这四种方式，如果考虑性能要求的话个人会选择纯回调的的写法，如果性能要求不那么高，更喜欢 zco的版本，因为更简洁。</p>\n<p>根据性能测试结果, <a href=\"https://github.com/yyrdl/zco\">zco</a> 是这几个coroutine模块中性能最好的，若追求极限性能的话还是精心设计回调吧，项目地址：<a href=\"https://github.com/yyrdl/zco\">https://github.com/yyrdl/zco</a></p>\n<p>目前是稳定版本,亲们都知道的，求star  ,客官认为还可以的话就给个呗，当然更欢迎批评意见！ ^-^</p>\n</div>",
            "title": "Say Bye Bye to Promise . And Compare With Async Await (ES7 feature)",
            "last_reply_at": "2017-06-05T13:01:20.659Z",
            "good": false,
            "top": false,
            "reply_count": 17,
            "visit_count": 914,
            "create_at": "2017-03-17T14:36:24.464Z",
            "author": {
                "loginname": "yyrdl",
                "avatar_url": "https://avatars2.githubusercontent.com/u/8213509?v=3&s=120"
            }
        },
        {
            "id": "593400febce3132e4bb4f8d8",
            "author_id": "542bff0c10ab5791322617c7",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1>时间</h1>\n<p>2017 年 6 月 10 日 星期六 下午 13:00 ～ 18:00</p>\n<h1>地点</h1>\n<p>北京朝阳区三里屯科技寺滚石店（工体北路四号机电院内 80office 三层）</p>\n<h1>内容</h1>\n<p>13:00 - 13:30 入场</p>\n<p>13:30 - 14:30 Angular 实战经验分享- 冯杨琦君, Thoughtworks 咨询师</p>\n<p>14:45 - 15:45 Angular 表单进阶 - 汪志诚（雪狼） Google 开发技术专家</p>\n<p>16:00 - 17:00 RxJs - Angular 的函数响应式编程 - 王子实 光辉城市 Web 全栈技术负责人</p>\n<h1>报名地址</h1>\n<p><a href=\"http://t.cn/RSfW6rn\">http://t.cn/RSfW6rn</a></p>\n<h1>本期活动钻石赞助商</h1>\n<p><strong>智课</strong>，百度战略投资的在线教育公司，2016 年完成 2 亿 B 轮融资。智课专注于国际教育赛道，在行业内首次提出并践行 AI+教育。智课研发自适应学习系统，将优质的内容和先进的技术科学的结合，为用户带来良好的学习体验和显著的提分效果。智课线上用户产品包括 PC 端智课网 极智批改网，移动端斩托福和模考，记录分析用户学习行为并为用户提供个性化解决方案的 SMART 学习系统，为用户提供多场景下学习产品及个性化解决方案。</p>\n</div>",
            "title": "［ 北京］6月10日 node-party @ 三里屯科技寺滚石店，报名从速 !",
            "last_reply_at": "2017-06-05T12:24:15.948Z",
            "good": false,
            "top": false,
            "reply_count": 6,
            "visit_count": 162,
            "create_at": "2017-06-04T12:45:50.186Z",
            "author": {
                "loginname": "Samurais",
                "avatar_url": "https://avatars1.githubusercontent.com/u/3538629?v=3&s=120"
            }
        },
        {
            "id": "593546e36b7ebe7e2979d86e",
            "author_id": "58a40942cefe06e13676a843",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>使用node-gyp编写Node.js的C/C++模块，建好了.cc和.gyp文件后，第一步“node-gyp configure”就报错了。\n控制台信息如下：\nroot<a href=\"/user/lmn\">@lmn</a>:/home/lmn/work# node-gyp configure\ngyp info it worked if it ends with ok\ngyp info using node-gyp@3.4.0\ngyp info using node@4.2.6 | linux | x64\ngyp info spawn /usr/local/bin/python2\ngyp info spawn args [ ‘/usr/share/node-gyp/gyp/gyp_main.py’,\ngyp info spawn args   ‘binding.gyp’,\ngyp info spawn args   ‘-f’,\ngyp info spawn args   ‘make’,\ngyp info spawn args   ‘-I’,\ngyp info spawn args   ‘/home/lmn/work/build/config.gypi’,\ngyp info spawn args   ‘-I’,\ngyp info spawn args   ‘/usr/share/node-gyp/addon.gypi’,\ngyp info spawn args   ‘-I’,\ngyp info spawn args   ‘/usr/include/nodejs/common.gypi’,\ngyp info spawn args   ‘-Dlibrary=shared_library’,\ngyp info spawn args   ‘-Dvisibility=default’,\ngyp info spawn args   ‘-Dnode_root_dir=/usr/include/nodejs’,\ngyp info spawn args   ‘-Dnode_gyp_dir=/usr/share/node-gyp’,\ngyp info spawn args   ‘-Dnode_lib_file=node.lib’,\ngyp info spawn args   ‘-Dmodule_root_dir=/home/lmn/work’,\ngyp info spawn args   ‘–depth=.’,\ngyp info spawn args   ‘–no-parallel’,\ngyp info spawn args   ‘–generator-output’,\ngyp info spawn args   ‘build’,\ngyp info spawn args   ‘-Goutput_dir=.’ ]\nTraceback (most recent call last):\nFile “/usr/share/node-gyp/gyp/gyp_main.py”, line 5, in &lt;module&gt;\nfrom pkg_resources import load_entry_point\nImportError: No module named pkg_resources\ngyp ERR! configure error\ngyp ERR! stack Error: <code>gyp</code> failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onCpExit (/usr/share/node-gyp/lib/configure.js:304:16)\ngyp ERR! stack     at emitTwo (events.js:87:13)\ngyp ERR! stack     at ChildProcess.emit (events.js:172:7)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\ngyp ERR! System Linux 4.8.0-22-generic\ngyp ERR! command “/usr/bin/nodejs” “/usr/bin/node-gyp” &quot;configure&quot;\ngyp ERR! cwd /home/lmn/work\ngyp ERR! node -v v4.2.6\ngyp ERR! node-gyp -v v3.4.0\ngyp ERR! not ok</p>\n</div>",
            "title": "求助！node-gyp configure 报错：“No module named pkg_resources”",
            "last_reply_at": "2017-06-05T11:56:19.410Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 27,
            "create_at": "2017-06-05T11:56:19.410Z",
            "author": {
                "loginname": "lmn9898",
                "avatar_url": "https://avatars1.githubusercontent.com/u/13041668?v=3&s=120"
            }
        },
        {
            "id": "59353fb7dfbb657c2a05c9fb",
            "author_id": "538ebff9c3ee0b58208376c7",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>举个例子，如果服务器绑定在IP地址和端口号上，当然是能运行HTTPS的：</p>\n<pre class=\"prettyprint language-js\"><code>let options = {\n    key: fs.readFileSync(&quot;key.pem&quot;),\n    cert: fs.readFileSync(&quot;cert.pem&quot;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n    console.log(&quot;Request received&quot;);\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n}).listen(50000, &quot;127.0.0.1&quot;);\nconsole.log(&quot;HTTPS server started.&quot;);\n\nsetTimeout(() =&gt; {\n    https.request({\n        host: &quot;127.0.0.1&quot;,\n        port: 50000,\n        rejectUnauthorized: false\n    }).end();\n}, 1000);\n</code></pre><p>但一旦绑定的是Unix socket，就不能运行HTTPS了，说self signed certificate error：</p>\n<pre class=\"prettyprint language-js\"><code>let options = {\n    key: fs.readFileSync(&quot;key.pem&quot;),\n    cert: fs.readFileSync(&quot;cert.pem&quot;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n    console.log(&quot;Request received&quot;);\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n}).listen(&quot;&#x2F;Users&#x2F;zzz&#x2F;test-unix-socket&#x2F;socket.sock&quot;);\nconsole.log(&quot;HTTPS server started.&quot;);\n\nsetTimeout(() =&gt; {\n    https.request({\n        socketPath: &quot;&#x2F;Users&#x2F;zzz&#x2F;test-unix-socket&#x2F;socket.sock&quot;,\n        rejectUnauthorized: false\n    }).end();\n}, 1000);\n</code></pre><p><code>key.pem</code>和<code>cert.pem</code>是用OpenSSL生成的自签名证书：</p>\n<pre class=\"prettyprint language-bash\"><code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 7300 -nodes\n</code></pre><p>这难道是Node的bug？</p>\n</div>",
            "title": "Unix socket在HTTPS下似乎不能用，难道是Node的bug？急死了",
            "last_reply_at": "2017-06-05T11:25:43.363Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 51,
            "create_at": "2017-06-05T11:25:43.363Z",
            "author": {
                "loginname": "zhanzhenzhen",
                "avatar_url": "https://avatars0.githubusercontent.com/u/731796?v=3&s=120"
            }
        },
        {
            "id": "59350eb33fcf5a746baa452e",
            "author_id": "5913f3b43504ce1c2ac45ac2",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>连接mongdb数据库，mongodb和mongoose，哪个好用一些</p>\n</div>",
            "title": "连接mongdb数据库，mongodb和mongoose，哪个好用一些",
            "last_reply_at": "2017-06-05T10:50:02.973Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 124,
            "create_at": "2017-06-05T07:56:35.987Z",
            "author": {
                "loginname": "majinliang123",
                "avatar_url": "https://avatars2.githubusercontent.com/u/15165848?v=3&s=120"
            }
        },
        {
            "id": "5933c8e75b07c1b24afa064f",
            "author_id": "541bf9b9ad60405c1f151a03",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><blockquote>\n<p>整理了一下我爬虫解析核心部分 做成了一个工具包 根据自定义的网站规则 将一个网址链接提取所需的内容</p>\n</blockquote>\n<p>整理了一下我爬虫解析核心部分 做成了一个工具包 根据自定义的网站规则 将一个网址链接提取所需的内容\n欢迎各位大佬给俺一个<a href=\"https://github.com/coolfishstudio/almighty-parser-core\">star  (๑•̀ㅂ•́)و✧</a>\n<a href=\"https://www.npmjs.com/package/almighty-parser-core\">NPM地址</a>\n<a href=\"https://github.com/coolfishstudio/almighty-parser-core\">Github地址</a></p>\n<p>附上我之前写的<a href=\"http://www.yitianyibu.com/category/n-crawler\">爬虫教程</a></p>\n<h2>页面爬虫解析器核心</h2>\n<p>此工具适用于</p>\n<ol>\n<li>对单独页面链接进行解析</li>\n<li>配合队列进行多页面解析</li>\n</ol>\n<h2>解释说明</h2>\n<p>支持详情页下一页抓取，支持繁体转换，支持对字数统计，支持对图片数量统计。\n目前主要针对静态页的解析，对json请求和jsonp请求的解析做了预留(暂不支持)。</p>\n<h2>安装</h2>\n<pre class=\"prettyprint\"><code>npm i --save almighty-parser-core\n</code></pre><h2>api接口</h2>\n<ul>\n<li><code>getLinks</code> 获取待抓页链接</li>\n<li><code>getContent</code> 获取详情页内容</li>\n<li><code>parse</code> 解析获取内容[为<code>getLinks</code>与<code>getContent</code>的集合]</li>\n<li><code>isArticleUrl</code> 检测链接是否是详情页</li>\n<li><code>isListUrl</code> 检测链接是否是列表页</li>\n<li><code>getIdFromArticleUrl</code> 获取页面链接的唯一标示</li>\n</ul>\n<h2>配置参数</h2>\n<p><a href=\"https://github.com/coolfishstudio/almighty-parser-core/blob/master/doc/CONFIG.md\">文档说明</a></p>\n<h2>实例</h2>\n<h3>定义网站规则</h3>\n<pre class=\"prettyprint\"><code>module.exports = {\n    &#x2F;&#x2F; 域名 网站域名,设置域名后只处理这些域名下的网页\n    domains: &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;&#x27;,\n    &#x2F;&#x2F; 列表页url的正则，符合这些正则的页面会被当作列表页处理\n    listUrlRegexes: [&#x2F;^https:\\&#x2F;\\&#x2F;www\\.qiushibaike\\.com(\\&#x2F;[a-z0-9]+(\\&#x2F;page\\&#x2F;[0-9]+)?)?(\\&#x2F;)?$&#x2F;],\n    &#x2F;&#x2F; 内容页url的正则，符合这些正则的页面会被当作内容页处理\n    contentUrlRegexes: [&#x2F;^https:\\&#x2F;\\&#x2F;www\\.qiushibaike\\.com\\&#x2F;article\\&#x2F;[0-9]+$&#x2F;],\n    &#x2F;&#x2F; 从内容页中抽取需要的数据\n    fields: [{\n        &#x2F;&#x2F; 作者\n        name: &#x27;author&#x27;,\n        meta: {\n            selector: [&#x27;.author h2&#x27;],\n            format: &#x27;text&#x27;\n        }\n    }, {\n        &#x2F;&#x2F; 标签 \n        name: &#x27;tags&#x27;,\n        meta: {\n            format: &#x27;text&#x27;,\n            selector: [&#x27;.source a&#x27;],\n            index: 0\n        }\n    }, {\n        &#x2F;&#x2F; 网页关键字\n        name: &#x27;keywords&#x27;,\n        meta: {\n            format: &#x27;meta&#x27;,\n            selector: [&#x27;meta[name=&quot;keywords&quot;]&#x27;]\n        }\n    }, {\n        &#x2F;&#x2F; 网页描述\n        name: &#x27;description&#x27;,\n        meta: {\n            format: &#x27;meta&#x27;,\n            selector: [&#x27;meta[name=&quot;description&quot;]&#x27;]\n        }\n    }, {\n        &#x2F;&#x2F; 详情\n        name: &#x27;content&#x27;,\n        meta: {\n            selector: [&#x27;.content&#x27;, &#x27;.thumb&#x27;],\n            format: &#x27;html&#x27;\n        },\n        required: true\n    }, {\n        name: &#x27;imagesCount&#x27;,\n        meta: {\n            selector: [&#x27;.thumb&#x27;],\n            format: &#x27;count&#x27;,\n            countType: &#x27;image&#x27;\n        },\n        defaultValue: 0\n    }, {\n        name: &#x27;wordsCount&#x27;,\n        meta: {\n            selector: [&#x27;.content&#x27;],\n            format: &#x27;count&#x27;,\n            countType: &#x27;text&#x27;\n        },\n        defaultValue: 0\n    }, {\n        name: &#x27;comments&#x27;,\n        meta: {\n            selector: [&#x27;.stats-comments .number&#x27;],\n            format: &#x27;text&#x27;\n        },\n        defaultValue: 0\n    }, {\n        name: &#x27;likes&#x27;,\n        meta: {\n            selector: [&#x27;.stats-vote .number&#x27;],\n            format: &#x27;text&#x27;\n        },\n        defaultValue: 0\n    }],\n    &#x2F;&#x2F; 是否模拟用户请求\n    userAgent: &#x27;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;57.0.2987.133 Safari&#x2F;537.36&#x27;,\n    &#x2F;&#x2F; 编码 默认utf-8\n    charset: null,\n    &#x2F;&#x2F; 回调函数 对所有数据做处理\n    afterExtractAll: function (data) {\n        data.fields[&#x27;hits&#x27;] = 0;\n        return data;\n    },\n    afterExtractField: function (fieldsName, data) {\n        if (fieldsName === &#x27;tags&#x27;) {\n            data = data ? data.split(&#x27;,&#x27;) : [];\n        }\n        if (fieldsName === &#x27;comments&#x27;) {\n            data = +data;\n        }\n        if (fieldsName === &#x27;likes&#x27;) {\n            data = +data;\n        }\n        return data;\n    }\n};\n</code></pre><h3>引入</h3>\n<pre class=\"prettyprint\"><code>const Crawler = require(&#x27;almighty-parser-core&#x27;)\nconst options = require(&#x27;..&#x2F;parser&#x2F;parser-qiushibaike.js&#x27;)\nconst parser = new Crawler(options)\n</code></pre><h3>API测试</h3>\n<h4>parse</h4>\n<pre class=\"prettyprint\"><code>{ fields:\n   { author: &#x27;草莓、牛奶巧克力&#x27;,\n     tags: [ &#x27;搞笑图片&#x27; ],\n     keywords: &#x27;&#x27;,\n     description: &#x27;笑死我了&#x27;,\n     content: &#x27;&lt;div class=&quot;content&quot;&gt;\\n\\n笑死我了\\n\\n&lt;&#x2F;div&gt;&lt;div class=&quot;thumb&quot;&gt;\\n\\n&lt;img src=&quot;&#x2F;&#x2F;pic.qiushibaike.com&#x2F;system&#x2F;pictures&#x2F;11909&#x2F;119095438&#x2F;medium&#x2F;app119095438.jpg&quot; alt=&quot;糗事#119095438&quot;&gt;\\n\\n&lt;&#x2F;div&gt;&#x27;,\n     imagesCount: 1,\n     wordsCount: 4,\n     comments: 0,\n     likes: 457,\n     from: &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119095438&#x27;,\n     sourceId: &#x27;com.qiushibaike.www-article-119095438&#x27;,\n     site: &#x27;www.qiushibaike.com&#x27;,\n     hits: 0 },\n  urls:\n   [ &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;hot&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;imgrank&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;text&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;history&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;pic&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;textnew&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;my&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116423562&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116424718&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116421669&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116423344&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116426229&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;116423107&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104614784&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104590828&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104629666&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104599846&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104598154&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;104619022&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118954381&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118491926&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118563113&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118806836&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118525804&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118770803&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119008939&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119033005&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119036209&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118922421&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119014594&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;119009873&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;118934286&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;joke&#x2F;&#x27;,\n     &#x27;https:&#x2F;&#x2F;www.qiushibaike.com&#x2F;article&#x2F;&#x27; ] }\n</code></pre><p>其余接口测试请下载后运行</p>\n<pre class=\"prettyprint\"><code>npm run test:qiushibaike\n</code></pre></div>",
            "title": "分享一下我写的爬虫解析器",
            "last_reply_at": "2017-06-05T10:39:58.333Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 212,
            "create_at": "2017-06-04T08:46:31.590Z",
            "author": {
                "loginname": "coolfishstudio",
                "avatar_url": "https://avatars2.githubusercontent.com/u/8791709?v=3&s=120"
            }
        },
        {
            "id": "5930eee364c9781e4812c91c",
            "author_id": "58f32ea3e54976e847e0a0d0",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1>Adminify</h1>\n<p><a href=\"https://github.com/wxs77577/adminify\">https://github.com/wxs77577/adminify</a></p>\n<p><a href=\"https://gitter.im/vue-adminify/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/vue-adminify/Lobby.svg\" alt=\"Join the chat at https://gitter.im/vue-adminify/Lobby\"></a></p>\n<p>基于Vuetify的后台管理框架，后续会推出基于AdonisJs的后端接口</p>\n<ul>\n<li>An Admin dashboard based on <a href=\"https://vuetifyjs.com/\">Vuetify</a> .</li>\n<li>Data in demo use <code>axios-mock-adapter</code></li>\n<li>Better Server API is built on <a href=\"http://www.adonisjs.com/\">AdonisJs</a> .</li>\n<li>Also welcome to <a href=\"https://adonis-china.org/\">Adonis China</a> .</li>\n</ul>\n<h2>Live Demo</h2>\n<h3><a href=\"http://adminify.genyii.com\">http://adminify.genyii.com</a></h3>\n<h2>Screenshots</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/1.png\" alt=\"1.png\"></td>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/2.png\" alt=\"2.png\"></td>\n</tr>\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/3.png\" alt=\"3.png\"></td>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/4.png\" alt=\"4.png\"></td>\n</tr>\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/5.png\" alt=\"5.png\"></td>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/6.png\" alt=\"6.png\"></td>\n</tr>\n<tr>\n<td><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/screenshots/7.png\" alt=\"7.png\"></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Features</h2>\n<ul>\n<li>Vue + Vue Router + Vuex + Axios.</li>\n<li>Material Design Style - <a href=\"https://vuetifyjs.com/\">Vuetify</a></li>\n<li>Data Grid with server side <code>sort</code>,<code>search</code>,<code>pagination</code> and json config.</li>\n<li>Dynamic Form Builder with <code>text</code>,<code>textarea</code>,<code>radios</code>,<code>checkboxes</code>,<code>select</code>,<code>html</code> input types and json config.</li>\n<li>Built in <code>localStorage</code> proxy for any data types.</li>\n<li>Axios Mock with <code>axios-mock-adapter</code> and <code>mockjs</code></li>\n<li>Configurable side menu with json</li>\n<li>i18n with <code>vue-i18n</code></li>\n<li><code>Basic</code> and <code>Main</code> layouts</li>\n<li>Stylus processor</li>\n<li>And more of your requests.</li>\n</ul>\n<h2>Getting start</h2>\n<ol>\n<li><code>git clone https://github.com/wxs77577/adminify.git</code></li>\n<li>Copy <code>src/config.sample.js</code> to <code>src/config.js</code></li>\n<li><code>npm install</code></li>\n<li><code>npm run dev</code></li>\n</ol>\n<blockquote>\n<p>Use <code>cnpm</code> instead <code>npm</code> in China</p>\n</blockquote>\n<h2>Config</h2>\n<blockquote>\n<p><code>src/config.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>const baseUrl = &#x27;http:&#x2F;&#x2F;localhost:3333&#x27;\nconst config = {\n  locale: &#x27;en-US&#x27;, &#x2F;&#x2F;en-US, zh-CN\n  url: baseUrl,\n  debug: {\n    mock: 1, &#x2F;&#x2F;enable mock\n    http: true, &#x2F;&#x2F;http request log\n  },\n  api: &#96;${baseUrl}&#x2F;admin&#x2F;api&#96;\n  &#x2F;&#x2F; locale: &#x27;en&#x27;, &#x2F;&#x2F;en\n  &#x2F;&#x2F; api: &#x27;http:&#x2F;&#x2F;192.168.1.108:3333&#x2F;admin&#x2F;api&#x27;\n}\n</code></pre><h2>Menu Config</h2>\n<blockquote>\n<p><code>src/menu.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>export default [\n  { &quot;href&quot;: &quot;&#x2F;&quot;, &quot;title&quot;: &quot;Home&quot;, &quot;icon&quot;: &quot;home&quot; },\n  { &quot;href&quot;: &quot;&#x2F;crud&#x2F;types&quot;, &quot;title&quot;: &quot;Types&quot;, &quot;icon&quot;: &quot;view_list&quot; },\n  { &quot;href&quot;: &quot;&#x2F;crud&#x2F;posts&quot;, &quot;title&quot;: &quot;Posts&quot;, &quot;icon&quot;: &quot;view_list&quot; },\n  { &quot;href&quot;: &quot;&#x2F;crud&#x2F;posts&#x2F;create&quot;, &quot;title&quot;: &quot;Create Post&quot;, &quot;icon&quot;: &quot;note_add&quot; },\n\n\n  { &quot;href&quot;: &quot;&#x2F;crud&#x2F;comments&quot;, &quot;title&quot;: &quot;Comments&quot;, &quot;icon&quot;: &quot;view_list&quot; },\n  { &quot;href&quot;: &quot;&#x2F;crud&#x2F;users&quot;, &quot;title&quot;: &quot;Users&quot;, &quot;icon&quot;: &quot;people&quot; },\n  \n  \n  \n  { &quot;href&quot;: &quot;&#x2F;chat&quot;, &quot;title&quot;: &quot;Chat&quot;, &quot;icon&quot;: &quot;chat&quot; },\n  {\n    &quot;title&quot;: &quot;Pages&quot;,\n    &quot;icon&quot;: &quot;domain&quot;,\n    &quot;items&quot;: [\n      { &quot;href&quot;: &quot;&#x2F;example&quot;, &quot;title&quot;: &quot;Example&quot; },\n      { &quot;href&quot;: &quot;&#x2F;about&quot;, &quot;title&quot;: &quot;About&quot; }\n    ]\n  },\n  { &quot;href&quot;: &quot;&#x2F;settings&quot;, &quot;title&quot;: &quot;Settings&quot;, &quot;icon&quot;: &quot;settings&quot; },\n\n  { &quot;href&quot;: &quot;&#x2F;login&quot;, &quot;icon&quot;: &quot;lock&quot;, &quot;title&quot;: &quot;Logout&quot; }\n]\n</code></pre><blockquote>\n<p>No more explaination needed right?</p>\n</blockquote>\n<h2>Routes</h2>\n<blockquote>\n<p>Part of <code>src/router.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>  &#x2F;&#x2F; The signature of &#96;route&#96; function :\n  function route(path, file, name, children) {}\n\n  &#x2F;&#x2F;routes\n  [\n    route(&#x27;&#x2F;login&#x27;, &#x27;Login&#x27;, &#x27;login&#x27;),\n    route(&#x27;&#x2F;error&#x27;, &#x27;Error&#x27;, &#x27;error&#x27;),\n\n    &#x2F;&#x2F;path, file(*.vue), name, children\n    \n    route(&#x27;&#x2F;&#x27;, &#x27;Main&#x27;, null, [\n      route(&#x27;&#x2F;&#x27;, &#x27;Home&#x27;, &#x27;home&#x27;),\n      route(&#x27;&#x2F;crud&#x2F;:resource&#x27;, &#x27;CrudGrid&#x27;, &#x27;grid&#x27;),\n      route(&#x27;&#x2F;crud&#x2F;:resource&#x2F;:id&#x2F;edit&#x27;, &#x27;CrudForm&#x27;, &#x27;edit&#x27;),\n      route(&#x27;&#x2F;crud&#x2F;:resource&#x2F;create&#x27;, &#x27;CrudForm&#x27;, &#x27;create&#x27;),\n      route(&#x27;&#x2F;crud&#x2F;:resource&#x2F;:id&#x2F;:action&#x27;, &#x27;CrudForm&#x27;, &#x27;action&#x27;),\n      route(&#x27;&#x2F;crud&#x2F;:resource&#x2F;:action&#x27;, &#x27;CrudForm&#x27;, &#x27;indexAction&#x27;),\n      route(&#x27;&#x2F;example&#x27;, &#x27;Example&#x27;),\n      route(&#x27;&#x2F;settings&#x27;, &#x27;Settings&#x27;),\n      route(&#x27;&#x2F;theme&#x27;, &#x27;Theme&#x27;),\n      route(&#x27;&#x2F;chat&#x27;, &#x27;Chat&#x27;),\n      route(&#x27;&#x2F;about&#x27;, &#x27;About&#x27;),\n    ]),\n    \n\n    &#x2F;&#x2F; Global redirect for 404\n    { path: &#x27;*&#x27;, redirect: &#x27;&#x2F;error&#x27;, query: {code: 404, message: &#x27;Page Not Found.&#x27;} }\n  ]\n</code></pre><h2>Grid View Config</h2>\n<blockquote>\n<p><code>src/mock/index.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>mock.onGet(&#x27;&#x2F;types&#x2F;grid&#x27;).reply(200, {\n  &quot;options&quot;: {\n    &quot;sort&quot;: &quot;id&quot;, &#x2F;&#x2F;default sort column\n    &quot;create&quot;: false, &#x2F;&#x2F;show Create button\n    &quot;update&quot;: true, &#x2F;&#x2F;show update button\n    &quot;delete&quot;: false &#x2F;&#x2F;show delete button\n  },\n  &quot;filters&quot;: {\n    &quot;model&quot;: {\n      &quot;name&quot;: &quot;&quot;,\n      &quot;created_at&quot;: &quot;&quot;\n    },\n    &quot;fields&quot;: { &#x2F;&#x2F;filters fields config\n      &quot;name&quot;: {\n        &quot;label&quot;: &quot;Name&quot;\n      },\n      &quot;created_at&quot;: {\n        &quot;label&quot;: &quot;Created At&quot;,\n        &quot;type&quot;: &quot;date&quot;\n      }\n    },\n    &quot;rules&quot;: {}\n  },\n  &quot;columns&quot;: [ &#x2F;&#x2F;columns config\n    {\n      &quot;text&quot;: &quot;Id&quot;, &#x2F;&#x2F;column header text\n      &quot;value&quot;: &quot;id&quot; &#x2F;&#x2F;field name\n    },\n    {\n      &quot;text&quot;: &quot;Name&quot;,\n      left: true, &#x2F;&#x2F;make text align left, default is right\n      &quot;value&quot;: &quot;name&quot;\n    }\n  ]\n});\n</code></pre><h2>Grid View Data</h2>\n<blockquote>\n<p><code>src/mock/index.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>mock.onGet(&#x2F;\\&#x2F;(posts|users|types|comments)$&#x2F;).reply(({ params = { page: 1, perPage: 10 }, url }) =&gt; {\n  let resource = url.split(&#x27;&#x2F;&#x27;)[1]\n  let offset = (params.page - 1) * params.perPage\n  let models = data[resource]\n  return [200, { &#x2F;&#x2F;return like this format\n    currentPage: params.page,\n    lastPage: Math.ceil(models.length &#x2F; params.perPage),\n    perPage: params.perPage,\n    total: data[resource].length,\n    data: models.slice(offset, offset + params.perPage)\n  }]\n});\n</code></pre><h2>Form Builder Config</h2>\n<blockquote>\n<p><code>src/mock/index.js</code></p>\n</blockquote>\n<pre class=\"prettyprint language-javascript\"><code>mock.onGet(&#x27;&#x2F;settings&#x2F;form&#x27;).reply(({ params }) =&gt; {\n  return [200, {\n    &quot;model&quot;: { &#x2F;&#x2F;form model\n      name: &#x27;Adminify&#x27;,\n      logo: &#x27;http:&#x2F;&#x2F;placeimg.com&#x2F;128&#x2F;128&#x2F;any&#x27;,\n      date: null,\n      \n      type: 1,\n      status: 1,\n      \n      tags: [],\n      description: &#x27;An Awesome Site&#x27;,\n      intro: &#x27;&#x27;,\n    },\n    &quot;fields&quot;: { &#x2F;&#x2F;form fields\n      &quot;name&quot;: {label: &#x27;Name&#x27;}, &#x2F;&#x2F;default type is &#x27;text&#x27;\n      &quot;logo&quot;: {label: &#x27;Logo&#x27;, type: &#x27;image&#x27;}, &#x2F;&#x2F;working in progress\n      &quot;date&quot;: {label: &#x27;Created At&#x27;, type: &#x27;date&#x27;},\n      &quot;type&quot;: {label: &#x27;Type&#x27;, type: &#x27;select&#x27;, options: [\n        {text: &#x27;Blog&#x27;, value: 1},\n        {text: &#x27;Company&#x27;, value: 2},\n        {text: &#x27;Game&#x27;, value: 3},\n      ]},\n      &quot;status&quot;: {label: &#x27;Status&#x27;, type: &#x27;radios&#x27;, width: &#x27;md3&#x27;, options: [\n        {text: &#x27;Enabled&#x27;, value: 1},\n        {text: &#x27;Disabled&#x27;, value: 2}\n      ]},\n      &quot;tags&quot;: {label: &#x27;Tags&#x27;, type: &#x27;checkboxes&#x27;, width: &#x27;md3&#x27;, options: [\n        {text: &#x27;Enabled&#x27;, value: 1},\n        {text: &#x27;Disabled&#x27;, value: 2}\n      ]},\n      &quot;description&quot;: {label: &#x27;Description&#x27;, type: &#x27;textarea&#x27;},\n      &quot;intro&quot;: {label: &#x27;Intro&#x27;, type: &#x27;html&#x27;},\n    }\n  }]\n})\n</code></pre><h2>Comunication</h2>\n<h3>Gitter IM</h3>\n<p><a href=\"https://gitter.im/vue-adminify/\">https://gitter.im/vue-adminify/</a></p>\n<h3>Wechat Group</h3>\n<p><img src=\"https://raw.githubusercontent.com/wxs77577/adminify/master/public/WechatGroup.png\" alt=\"Wechat Group\"></p>\n</div>",
            "title": "Adminify - 基于Vuetify的后台管理界面",
            "last_reply_at": "2017-06-05T09:56:15.341Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 300,
            "create_at": "2017-06-02T04:51:47.238Z",
            "author": {
                "loginname": "wxs77577",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1990059?v=3&s=120"
            }
        },
        {
            "id": "5935264a69912fcf6b3cc9ca",
            "author_id": "5913f3b43504ce1c2ac45ac2",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>在删除nodemodules后，运行npm install, 只安装了devDependencies里面的依赖，而dependencies里面的依赖没有安装，是我运行的命令错了吗</p>\n</div>",
            "title": "npm5在删除node_modules后，重新安装dependencies时，package.json中的devDependencies部分可以安装成功，而dependencies安装不成功",
            "last_reply_at": "2017-06-05T09:49:38.107Z",
            "good": false,
            "top": false,
            "reply_count": 1,
            "visit_count": 73,
            "create_at": "2017-06-05T09:37:14.240Z",
            "author": {
                "loginname": "majinliang123",
                "avatar_url": "https://avatars2.githubusercontent.com/u/15165848?v=3&s=120"
            }
        },
        {
            "id": "592fdc2f03dba3510d8a62a0",
            "author_id": "58edae8949056f03483477e8",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>现在项目遇到了一点问题，表现是命令行有打印，能收到请求，但是不吐数据，\n经坛友指点，现在怀疑是资源没释放导致的，所以想加一个超时处理，\n然后看了express的教程，貌似可以用connect-timeout中间件解决\n但是这个中间件在项目里始终要报can’t set headers after they are sent.\n目前也没什么好的解决办法，各位有主意吗？</p>\n</div>",
            "title": "express响应超时应该怎么做？",
            "last_reply_at": "2017-06-05T09:32:55.801Z",
            "good": false,
            "top": false,
            "reply_count": 12,
            "visit_count": 361,
            "create_at": "2017-06-01T09:19:43.692Z",
            "author": {
                "loginname": "lzszone",
                "avatar_url": "https://avatars3.githubusercontent.com/u/16443301?v=3&s=120"
            }
        },
        {
            "id": "59352290538dbcaa6bc7dce0",
            "author_id": "57b08034a4f7e29c763413ef",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>const originalData = [\n{ name: ‘liu’, age: 30, score: 80, gender: 1, lesson: ‘math’ },\n{ name: ‘wu’, age: 31, score: 70, gender: 1, lesson: ‘math’ },\n{ name: ‘maks’, age: 27, score: 900, gender: 0, lesson: ‘math’ },\n{ name: ‘liu’, age: 30, score: 80, gender: 1, lesson: ‘english’ }\n];</p>\n<p>问题：返回一个平均分计算结果，按照 <code>lesson</code> and <code>gender</code>分组;\n例如：returns { math: { 0: 73, 1: 82 }, english: { 0: 65, 1: 43 } }</p>\n<p>答案：？</p>\n</div>",
            "title": "求教一个关于使用lodash 的技巧问题",
            "last_reply_at": "2017-06-05T09:21:20.304Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 97,
            "create_at": "2017-06-05T09:21:20.304Z",
            "author": {
                "loginname": "lvgithub",
                "avatar_url": "https://avatars2.githubusercontent.com/u/16065346?v=3&s=120"
            }
        },
        {
            "id": "593429325b07c1b24afa066e",
            "author_id": "58d54f12b3e60b982d089b81",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>整个表的数据 都乱了。\n想对整个表按_id排个序。 求大神给个操作。\n我看文档 看不懂。我猜可能是要update 。</p>\n</div>",
            "title": "mongodb怎么使得排序在服务端生效",
            "last_reply_at": "2017-06-05T09:18:46.376Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 140,
            "create_at": "2017-06-04T15:37:22.615Z",
            "author": {
                "loginname": "bringtree",
                "avatar_url": "https://avatars3.githubusercontent.com/u/20106478?v=3&s=120"
            }
        },
        {
            "id": "5934f6c8739a92064a1bd515",
            "author_id": "5710ac2f0a1e9da252f1e368",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>各位大神好，\n我们项目组要用protobuf缩减流量，但是mongo没法直接存protobuf，每次从数据库取json再转成pb,存的时候在pb转成json,这样很耗时。去google一下发现都是讲protobuf用法的 ，基本没有讲protobuf和数据库如何配合的，有几个讲的是存成字符串，但是这样的话就没法做排序和筛选了，各位大神有碰到这问题的能分享下经验吗。</p>\n</div>",
            "title": "protobuf与nodejs,mongo三者如何不通过json配合使用",
            "last_reply_at": "2017-06-05T09:12:24.945Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 89,
            "create_at": "2017-06-05T06:14:32.517Z",
            "author": {
                "loginname": "yamideh",
                "avatar_url": "https://avatars2.githubusercontent.com/u/18480086?v=3&s=120"
            }
        },
        {
            "id": "59352025538dbcaa6bc7dcd7",
            "author_id": "5933d569bce3132e4bb4f8d5",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><pre class=\"prettyprint language-js\"><code>function foo(){ throw new Error(&#x27;zjl&#x27;)}\nfunction*fn(){\n\ttry{\n\t\tyield foo();\n\t}catch(e){\n\t\tconsole.log(e)\n\t}\n}\n</code></pre><p><strong>上面会被caty/catch ，而下面这个Promise就不会被try/catch</strong></p>\n<pre class=\"prettyprint language-js\"><code>function * fn(){\n  yield Promise.reject(&#x27;ixl&#x27;)\n}\n&#x2F;&#x2F;执行next后，会报错.\nfunction *fn(){\n  try{\n     yield Promise.reject(&#x27;ixl&#x27;)\n  }catch(e){\n    console.log(e)\n  }\n}\n&#x2F;&#x2F;也会报错\n</code></pre><p><strong>而async里面，我看了下对await进行try/catch  可以避免 处于rejected状态的promise跳出async函数  怎么做到的？</strong></p>\n</div>",
            "title": "关于async里面try/catch的一个问题",
            "last_reply_at": "2017-06-05T09:11:01.283Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 80,
            "create_at": "2017-06-05T09:11:01.283Z",
            "author": {
                "loginname": "5196666qwe",
                "avatar_url": "https://avatars1.githubusercontent.com/u/20163909?v=3&s=120"
            }
        },
        {
            "id": "593421f5bce3132e4bb4f8e0",
            "author_id": "58b8c1e6e418a986315f3aee",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>我使用了koa-views中间件，在ejs文件中有如下代码\n\t&lt;% if (user) { %&gt;\n\t\t&lt;h2&gt;&lt;%= <a href=\"http://user.name\">user.name</a> %&gt;&lt;/h2&gt;\n\t&lt;% } %&gt;\n若在js文件中加入如下代码则编译通过：\n\tctx.state.user = {}\n如果不使用该语句,则会爆出user未定义的错误（<strong>user is not defined</strong>）。\n请问如何解决在不给ctx.state赋值的情况下，能编译通过。</p>\n</div>",
            "title": "新手请教一个koa2使用ejs的问题。",
            "last_reply_at": "2017-06-05T08:25:24.794Z",
            "good": false,
            "top": false,
            "reply_count": 3,
            "visit_count": 145,
            "create_at": "2017-06-04T15:06:29.155Z",
            "author": {
                "loginname": "mofanjun",
                "avatar_url": "https://avatars0.githubusercontent.com/u/17316279?v=3&s=120"
            }
        }
    ]
}